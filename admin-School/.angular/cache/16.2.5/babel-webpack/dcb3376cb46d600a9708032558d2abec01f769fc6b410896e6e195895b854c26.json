{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../classeroom.service\";\nimport * as i2 from \"../attendance.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction AttendanceComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 2);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.successMessage, \" \");\n  }\n}\nexport class AttendanceComponent {\n  constructor(Cla, att, router) {\n    this.Cla = Cla;\n    this.att = att;\n    this.router = router;\n    this.today = new Date();\n    this.cla = 'Classe A';\n    //selectedStatus: { studentId: string, status: string }[] = [];\n    this.selectedStatus = {};\n    this.showMessage = false;\n    this.successMessage = '';\n    this.Classes = [];\n    //Students:IClassroom[]=[]\n    this.filteredList = [];\n  }\n  ngOnInit() {\n    this.Cla.getClasse().subscribe(classe => {\n      this.Classes = classe;\n      this.updateFilteredList();\n    });\n  }\n  updateFilteredList() {\n    this.filteredList = this.Classes.filter(classroom => classroom.name === this.cla);\n    console.log(this.filteredList);\n  }\n  onAdd() {\n    // console.log('Before loop: selectedStatus', this.selectedStatus);\n    for (const studentId of Object.keys(this.selectedStatus)) {\n      const status = this.selectedStatus[studentId];\n      // Now you can use studentId and status in your loop\n      //console.log(`Student ID: ${studentId}, Status: ${status}`);\n      // Check if both studentId and status are defined\n      if (studentId && status) {\n        // Create an attendance object based on the selected data\n        const attendanceData = {\n          iduser: studentId,\n          status: status\n        };\n        //console.log('Sending attendanceData', attendanceData);\n        // Send the attendance data for this student\n        this.att.createAttendance(attendanceData).subscribe(response => {\n          // Handle the response from the API if needed\n          console.log('API response:', response);\n        });\n      }\n      this.showSuccessMessage();\n    }\n    //console.log('After loop');\n  }\n\n  showSuccessMessage() {\n    this.successMessage = 'Attendance effectuer avec succès';\n    this.showMessage = true;\n    // Hide the message after a certain time (e.g., 5 seconds)\n    setTimeout(() => {\n      this.showMessage = false;\n      this.successMessage = '';\n      this.router.navigate(['/dashboard/home']);\n    }, 5000);\n  }\n  static #_ = this.ɵfac = function AttendanceComponent_Factory(t) {\n    return new (t || AttendanceComponent)(i0.ɵɵdirectiveInject(i1.ClasseroomService), i0.ɵɵdirectiveInject(i2.AttendanceService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AttendanceComponent,\n    selectors: [[\"app-attendance\"]],\n    decls: 3,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [1, \"d-flex\", \"justify-content-between\"], [\"role\", \"alert\", 1, \"alert\", \"alert-primary\"]],\n    template: function AttendanceComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AttendanceComponent_div_0_Template, 3, 1, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtext(2, \"...\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.showMessage);\n      }\n    },\n    dependencies: [i4.NgIf],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","successMessage","AttendanceComponent","constructor","Cla","att","router","today","Date","cla","selectedStatus","showMessage","Classes","filteredList","ngOnInit","getClasse","subscribe","classe","updateFilteredList","filter","classroom","name","console","log","onAdd","studentId","Object","keys","status","attendanceData","iduser","createAttendance","response","showSuccessMessage","setTimeout","navigate","_","ɵɵdirectiveInject","i1","ClasseroomService","i2","AttendanceService","i3","Router","_2","selectors","decls","vars","consts","template","AttendanceComponent_Template","rf","ctx","ɵɵtemplate","AttendanceComponent_div_0_Template","ɵɵproperty"],"sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\attendance\\attendance.component.ts","C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\attendance\\attendance.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { IClassroom } from 'src/models';\nimport { ClasseroomService } from '../classeroom.service';\nimport { AttendanceService } from '../attendance.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-attendance',\n  templateUrl: './attendance.component.html',\n  styleUrls: ['./attendance.component.css']\n})\nexport class AttendanceComponent {\n  today: Date = new Date();\n  cla:String='Classe A'\n  //selectedStatus: { studentId: string, status: string }[] = [];\n  selectedStatus: { [studentId: string]: string } = {};\n  showMessage = false;\n  successMessage = '';\n  Classes: IClassroom[] = [];\n  //Students:IClassroom[]=[]\n  filteredList: IClassroom[] = [];\n  constructor(private Cla:ClasseroomService,private att:AttendanceService,private router:Router){}\n  \n  ngOnInit(): void {\n    \n    this.Cla.getClasse()\n    .subscribe(classe =>{\n      this.Classes = classe;\n     \n      this.updateFilteredList()\n    });\n    \n  }\n  updateFilteredList() {\n    this.filteredList = this.Classes.filter((classroom) => classroom.name === this.cla);\n    console.log(this.filteredList);\n  }\n\n  onAdd() {\n   // console.log('Before loop: selectedStatus', this.selectedStatus);\n\nfor (const studentId of Object.keys(this.selectedStatus)) {\n\n  const status = this.selectedStatus[studentId];\n\n  // Now you can use studentId and status in your loop\n  //console.log(`Student ID: ${studentId}, Status: ${status}`);\n\n  // Check if both studentId and status are defined\n  if (studentId && status) {\n    // Create an attendance object based on the selected data\n    const attendanceData = {\n      iduser: studentId,\n      status: status,\n    };\n\n    //console.log('Sending attendanceData', attendanceData);\n\n    // Send the attendance data for this student\n    this.att.createAttendance(attendanceData).subscribe(response => {\n      // Handle the response from the API if needed\n      console.log('API response:', response);\n    });\n  } \n  this.showSuccessMessage();\n}\n\n//console.log('After loop');\n\n  }\n  showSuccessMessage() {\n    this.successMessage = 'Attendance effectuer avec succès';\n    this.showMessage = true;\n  \n    // Hide the message after a certain time (e.g., 5 seconds)\n    setTimeout(() => {\n      this.showMessage = false;\n      this.successMessage = '';\n      this.router.navigate(['/dashboard/home']);\n    }, 5000);\n    \n  }\n}\n","<div *ngIf=\"showMessage\">\n<div class=\"alert alert-primary\" role=\"alert\">\n    {{ successMessage }}\n    </div>\n</div>\n<div class=\"d-flex justify-content-between\">...</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}