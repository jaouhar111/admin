{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PaymentComponent = class PaymentComponent {\n  constructor(userService, payment) {\n    this.userService = userService;\n    this.payment = payment;\n    this.employees = [];\n    this.today = \"\";\n    this.dts = Date.now();\n    this.bonus = \"0\";\n    this.showMessage = false;\n    this.successMessage = '';\n  }\n  ngOnInit() {\n    this.userService.getAll().subscribe(data => {\n      // Filter users by role 'student'\n      this.employees = data.filter(user => user.role !== 'Student');\n      this.selectedOption = this.employees;\n    });\n  }\n  addPayment() {\n    const paymentData = {\n      userId: this.selectedOption._id,\n      amount: parseInt(this.selectedOption.salaire) + parseInt(this.bonus),\n      paymentDate: this.today,\n      paymentType: 'regularPayment' // Replace with the payment type (e.g., 'collectionFee' or 'regularPayment')\n      // Add any other payment details as needed\n    };\n\n    console.log(this.today);\n    this.payment.createPayment(paymentData).subscribe(response => {\n      console.log('Payment added successfully:', response);\n      // You can perform additional actions after a successful payment creation\n    }, error => {\n      console.error('Error adding payment:', error);\n      // Handle errors appropriately (e.g., show an error message to the user)\n    });\n  }\n\n  checkEmployeePaymentStatus(employeeId) {\n    this.payment.hasEmployeeBeenPaidThisMonth(employeeId, this.today).subscribe(hasBeenPaid => {\n      if (hasBeenPaid) {\n        // Employee has already been paid for this month, handle accordingly\n        console.log('Employee has already been paid for this month.');\n        console.log(this.today);\n        this.successMessage = 'Employee has already been paid for this month', this.showSuccessMessage();\n      } else {\n        // Employee has not been paid for this month, proceed with adding a new payment\n        this.addPayment();\n        this.successMessage = 'Payment added successfully', this.showSuccessMessage();\n      }\n    }, error => {\n      console.error('Error checking payment status:', error);\n      // Handle errors appropriately\n    });\n  }\n\n  showSuccessMessage() {\n    //this.successMessage = 'Classe ajoutée avec succès';\n    this.showMessage = true;\n    // Hide the message after a certain time (e.g., 5 seconds)\n    setTimeout(() => {\n      this.showMessage = false;\n      this.successMessage = '';\n      // this.router.navigate(['/dashboard/classe']);\n    }, 5000);\n  }\n};\nPaymentComponent = __decorate([Component({\n  selector: 'app-payment',\n  templateUrl: './payment.component.html',\n  styleUrls: ['./payment.component.css']\n})], PaymentComponent);","map":{"version":3,"names":["Component","PaymentComponent","constructor","userService","payment","employees","today","dts","Date","now","bonus","showMessage","successMessage","ngOnInit","getAll","subscribe","data","filter","user","role","selectedOption","addPayment","paymentData","userId","_id","amount","parseInt","salaire","paymentDate","paymentType","console","log","createPayment","response","error","checkEmployeePaymentStatus","employeeId","hasEmployeeBeenPaidThisMonth","hasBeenPaid","showSuccessMessage","setTimeout","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\payment\\payment.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { IUser } from 'src/models';\nimport { UserService } from '../user.service';\nimport { PaymentService } from '../payment.service';\n\n@Component({\n  selector: 'app-payment',\n  templateUrl: './payment.component.html',\n  styleUrls: ['./payment.component.css']\n})\nexport class PaymentComponent implements OnInit {\n  employees:IUser[]=[];\n  today=\"\";\n  dts=Date.now()\n  selectedOption:IUser|any;\n  bonus:string=\"0\"\n  showMessage = false;\n  successMessage = '';\n  constructor(private userService:UserService,private payment:PaymentService) {\n   \n  }\n  ngOnInit(): void {\n    this.userService.getAll()\n\n  .subscribe((data: IUser[]) => {\n    // Filter users by role 'student'\n    this.employees = data.filter(user => user.role !== 'Student');\n    this.selectedOption=this.employees;\n    \n  });\n  }\n  addPayment(): void {\n    const paymentData = {\n      userId: this.selectedOption._id, // Replace with the user ID for whom the payment is being made\n      amount: parseInt(this.selectedOption.salaire)+parseInt(this.bonus),  // Replace with the payment amount\n      paymentDate: this.today,  // Replace with the payment date\n      paymentType: 'regularPayment',  // Replace with the payment type (e.g., 'collectionFee' or 'regularPayment')\n      // Add any other payment details as needed\n    };\n    console.log(this.today);\n    this.payment.createPayment(paymentData).subscribe(\n      (response) => {\n        console.log('Payment added successfully:', response);\n        // You can perform additional actions after a successful payment creation\n      },\n      (error) => {\n        console.error('Error adding payment:', error);\n        // Handle errors appropriately (e.g., show an error message to the user)\n      }\n    );\n  }\n  checkEmployeePaymentStatus(employeeId: string): void {\n    this.payment.hasEmployeeBeenPaidThisMonth(employeeId,this.today).subscribe(\n      (hasBeenPaid) => {\n        if (hasBeenPaid) {\n          // Employee has already been paid for this month, handle accordingly\n          console.log('Employee has already been paid for this month.');\n          console.log(this.today);\n          this.successMessage='Employee has already been paid for this month',\n          this.showSuccessMessage();\n        } else {\n          // Employee has not been paid for this month, proceed with adding a new payment\n          this.addPayment();\n          this.successMessage='Payment added successfully',\n          this.showSuccessMessage();\n        }\n      },\n      (error) => {\n        console.error('Error checking payment status:', error);\n        // Handle errors appropriately\n      }\n    );\n  }\n  showSuccessMessage() {\n    //this.successMessage = 'Classe ajoutée avec succès';\n    this.showMessage = true;\n  \n    // Hide the message after a certain time (e.g., 5 seconds)\n    setTimeout(() => {\n      this.showMessage = false;\n      this.successMessage = '';\n     // this.router.navigate(['/dashboard/classe']);\n    }, 5000);\n    \n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAU1C,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAQ3BC,YAAoBC,WAAuB,EAASC,OAAsB;IAAtD,KAAAD,WAAW,GAAXA,WAAW;IAAqB,KAAAC,OAAO,GAAPA,OAAO;IAP3D,KAAAC,SAAS,GAAS,EAAE;IACpB,KAAAC,KAAK,GAAC,EAAE;IACR,KAAAC,GAAG,GAACC,IAAI,CAACC,GAAG,EAAE;IAEd,KAAAC,KAAK,GAAQ,GAAG;IAChB,KAAAC,WAAW,GAAG,KAAK;IACnB,KAAAC,cAAc,GAAG,EAAE;EAGnB;EACAC,QAAQA,CAAA;IACN,IAAI,CAACV,WAAW,CAACW,MAAM,EAAE,CAE1BC,SAAS,CAAEC,IAAa,IAAI;MAC3B;MACA,IAAI,CAACX,SAAS,GAAGW,IAAI,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAK,SAAS,CAAC;MAC7D,IAAI,CAACC,cAAc,GAAC,IAAI,CAACf,SAAS;IAEpC,CAAC,CAAC;EACF;EACAgB,UAAUA,CAAA;IACR,MAAMC,WAAW,GAAG;MAClBC,MAAM,EAAE,IAAI,CAACH,cAAc,CAACI,GAAG;MAC/BC,MAAM,EAAEC,QAAQ,CAAC,IAAI,CAACN,cAAc,CAACO,OAAO,CAAC,GAACD,QAAQ,CAAC,IAAI,CAAChB,KAAK,CAAC;MAClEkB,WAAW,EAAE,IAAI,CAACtB,KAAK;MACvBuB,WAAW,EAAE,gBAAgB,CAAG;MAChC;KACD;;IACDC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACzB,KAAK,CAAC;IACvB,IAAI,CAACF,OAAO,CAAC4B,aAAa,CAACV,WAAW,CAAC,CAACP,SAAS,CAC9CkB,QAAQ,IAAI;MACXH,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEE,QAAQ,CAAC;MACpD;IACF,CAAC,EACAC,KAAK,IAAI;MACRJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C;IACF,CAAC,CACF;EACH;;EACAC,0BAA0BA,CAACC,UAAkB;IAC3C,IAAI,CAAChC,OAAO,CAACiC,4BAA4B,CAACD,UAAU,EAAC,IAAI,CAAC9B,KAAK,CAAC,CAACS,SAAS,CACvEuB,WAAW,IAAI;MACd,IAAIA,WAAW,EAAE;QACf;QACAR,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;QAC7DD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACzB,KAAK,CAAC;QACvB,IAAI,CAACM,cAAc,GAAC,+CAA+C,EACnE,IAAI,CAAC2B,kBAAkB,EAAE;OAC1B,MAAM;QACL;QACA,IAAI,CAAClB,UAAU,EAAE;QACjB,IAAI,CAACT,cAAc,GAAC,4BAA4B,EAChD,IAAI,CAAC2B,kBAAkB,EAAE;;IAE7B,CAAC,EACAL,KAAK,IAAI;MACRJ,OAAO,CAACI,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC,CACF;EACH;;EACAK,kBAAkBA,CAAA;IAChB;IACA,IAAI,CAAC5B,WAAW,GAAG,IAAI;IAEvB;IACA6B,UAAU,CAAC,MAAK;MACd,IAAI,CAAC7B,WAAW,GAAG,KAAK;MACxB,IAAI,CAACC,cAAc,GAAG,EAAE;MACzB;IACD,CAAC,EAAE,IAAI,CAAC;EAEV;CACD;AA3EYX,gBAAgB,GAAAwC,UAAA,EAL5BzC,SAAS,CAAC;EACT0C,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACW3C,gBAAgB,CA2E5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}