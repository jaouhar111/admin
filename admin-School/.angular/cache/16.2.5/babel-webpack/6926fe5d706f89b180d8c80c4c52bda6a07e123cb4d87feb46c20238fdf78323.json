{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AttEmpComponent = class AttEmpComponent {\n  constructor(Cla, att, userService, router) {\n    this.Cla = Cla;\n    this.att = att;\n    this.userService = userService;\n    this.router = router;\n    this.employees = [];\n    this.showMessage = false;\n    this.successMessage = '';\n    this.selectedStatus = {};\n  }\n  ngOnInit() {\n    this.userService.getAll().subscribe(data => {\n      // Filter users by role 'student'\n      this.employees = data.filter(user => user.role !== 'Student');\n      console.log(this.employees);\n      //this.filteredList=[...this.employees]\n    });\n  }\n\n  onAdd() {\n    // console.log('Before loop: selectedStatus', this.selectedStatus);\n    for (const studentId of Object.keys(this.selectedStatus)) {\n      const status = this.selectedStatus[studentId];\n      // Now you can use studentId and status in your loop\n      //console.log(`Student ID: ${studentId}, Status: ${status}`);\n      // Check if both studentId and status are defined\n      if (studentId && status) {\n        // Create an attendance object based on the selected data\n        const attendanceData = {\n          iduser: studentId,\n          status: status\n        };\n        //console.log('Sending attendanceData', attendanceData);\n        // Send the attendance data for this student\n        this.att.createAttendance(attendanceData).subscribe(response => {\n          // Handle the response from the API if needed\n          console.log('API response:', response);\n        });\n      }\n    }\n    this.showSuccessMessage();\n  }\n  showSuccessMessage() {\n    this.successMessage = 'Attendance effectuer avec succès';\n    this.showMessage = true;\n    // Hide the message after a certain time (e.g., 5 seconds)\n    setTimeout(() => {\n      this.showMessage = false;\n      this.successMessage = '';\n      this.router.navigate(['/dashboard/home']);\n    }, 5000);\n  }\n};\nAttEmpComponent = __decorate([Component({\n  selector: 'app-att-emp',\n  templateUrl: './att-emp.component.html',\n  styleUrls: ['./att-emp.component.css']\n})], AttEmpComponent);","map":{"version":3,"names":["Component","AttEmpComponent","constructor","Cla","att","userService","router","employees","showMessage","successMessage","selectedStatus","ngOnInit","getAll","subscribe","data","filter","user","role","console","log","onAdd","studentId","Object","keys","status","attendanceData","iduser","createAttendance","response","showSuccessMessage","setTimeout","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\att-emp\\att-emp.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ClasseroomService } from '../classeroom.service';\nimport { AttendanceService } from '../attendance.service';\nimport { UserService } from '../user.service';\nimport { IUser } from 'src/models';\n\n@Component({\n  selector: 'app-att-emp',\n  templateUrl: './att-emp.component.html',\n  styleUrls: ['./att-emp.component.css']\n})\nexport class AttEmpComponent {\n  employees: any[] = []; \n  showMessage = false;\n  successMessage = '';\n  selectedStatus: { [employeeId: string]: string } = {};\n  constructor(private Cla:ClasseroomService,private att:AttendanceService,private userService:UserService,private router:Router){}\n  ngOnInit(): void {\n    this.userService.getAll()\n\n  .subscribe((data: IUser[]) => {\n    // Filter users by role 'student'\n    this.employees = data.filter(user => user.role !== 'Student');\n    console.log(this.employees);\n    //this.filteredList=[...this.employees]\n  });\n  }\n  onAdd() {\n    // console.log('Before loop: selectedStatus', this.selectedStatus);\n \n for (const studentId of Object.keys(this.selectedStatus)) {\n \n   const status = this.selectedStatus[studentId];\n \n   // Now you can use studentId and status in your loop\n   //console.log(`Student ID: ${studentId}, Status: ${status}`);\n \n   // Check if both studentId and status are defined\n   if (studentId && status) {\n     // Create an attendance object based on the selected data\n     const attendanceData = {\n       iduser: studentId,\n       status: status,\n     };\n \n     //console.log('Sending attendanceData', attendanceData);\n \n     // Send the attendance data for this student\n     this.att.createAttendance(attendanceData).subscribe(response => {\n       // Handle the response from the API if needed\n       console.log('API response:', response);\n     });\n   } \n }\n \n this.showSuccessMessage();\n \n   }\n\n   showSuccessMessage() {\n    this.successMessage = 'Attendance effectuer avec succès';\n    this.showMessage = true;\n  \n    // Hide the message after a certain time (e.g., 5 seconds)\n    setTimeout(() => {\n      this.showMessage = false;\n      this.successMessage = '';\n      this.router.navigate(['/dashboard/home']);\n    }, 5000);\n    \n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAWlC,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAK1BC,YAAoBC,GAAqB,EAASC,GAAqB,EAASC,WAAuB,EAASC,MAAa;IAAzG,KAAAH,GAAG,GAAHA,GAAG;IAA2B,KAAAC,GAAG,GAAHA,GAAG;IAA2B,KAAAC,WAAW,GAAXA,WAAW;IAAqB,KAAAC,MAAM,GAANA,MAAM;IAJtH,KAAAC,SAAS,GAAU,EAAE;IACrB,KAAAC,WAAW,GAAG,KAAK;IACnB,KAAAC,cAAc,GAAG,EAAE;IACnB,KAAAC,cAAc,GAAqC,EAAE;EAC0E;EAC/HC,QAAQA,CAAA;IACN,IAAI,CAACN,WAAW,CAACO,MAAM,EAAE,CAE1BC,SAAS,CAAEC,IAAa,IAAI;MAC3B;MACA,IAAI,CAACP,SAAS,GAAGO,IAAI,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAK,SAAS,CAAC;MAC7DC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,SAAS,CAAC;MAC3B;IACF,CAAC,CAAC;EACF;;EACAa,KAAKA,CAAA;IACH;IAEH,KAAK,MAAMC,SAAS,IAAIC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACb,cAAc,CAAC,EAAE;MAExD,MAAMc,MAAM,GAAG,IAAI,CAACd,cAAc,CAACW,SAAS,CAAC;MAE7C;MACA;MAEA;MACA,IAAIA,SAAS,IAAIG,MAAM,EAAE;QACvB;QACA,MAAMC,cAAc,GAAG;UACrBC,MAAM,EAAEL,SAAS;UACjBG,MAAM,EAAEA;SACT;QAED;QAEA;QACA,IAAI,CAACpB,GAAG,CAACuB,gBAAgB,CAACF,cAAc,CAAC,CAACZ,SAAS,CAACe,QAAQ,IAAG;UAC7D;UACAV,OAAO,CAACC,GAAG,CAAC,eAAe,EAAES,QAAQ,CAAC;QACxC,CAAC,CAAC;;;IAIN,IAAI,CAACC,kBAAkB,EAAE;EAEvB;EAEAA,kBAAkBA,CAAA;IACjB,IAAI,CAACpB,cAAc,GAAG,kCAAkC;IACxD,IAAI,CAACD,WAAW,GAAG,IAAI;IAEvB;IACAsB,UAAU,CAAC,MAAK;MACd,IAAI,CAACtB,WAAW,GAAG,KAAK;MACxB,IAAI,CAACC,cAAc,GAAG,EAAE;MACxB,IAAI,CAACH,MAAM,CAACyB,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC;IAC3C,CAAC,EAAE,IAAI,CAAC;EAEV;CACD;AA5DY9B,eAAe,GAAA+B,UAAA,EAL3BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACWlC,eAAe,CA4D3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}