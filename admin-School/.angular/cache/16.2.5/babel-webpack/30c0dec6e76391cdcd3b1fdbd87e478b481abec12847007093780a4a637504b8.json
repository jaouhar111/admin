{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../user.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../classeroom.service\";\nexport class AdmissionComponent {\n  constructor(userService, formBuilder, Cla) {\n    this.userService = userService;\n    this.formBuilder = formBuilder;\n    this.Cla = Cla;\n    this.users = [];\n    this.userForm = new FormGroup({});\n    this.Classes = [];\n    this.userForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      register: ['', Validators.required],\n      genre: ['', Validators.required],\n      dateN: ['', Validators.required],\n      adresse: ['', Validators.required],\n      role: ['', Validators.required],\n      father: ['', Validators.required],\n      profession: ['', Validators.required],\n      nationalId: ['', Validators.required],\n      educat: ['', Validators.required],\n      mobile: ['', Validators.required],\n      email: ['', Validators.required]\n      //salaire: ['', Validators.required],\n    });\n  }\n\n  ngOnInit() {\n    this.Cla.getClasse().subscribe(classe => {\n      this.Classes = classe;\n      console.log(this.Classes);\n    });\n  }\n  addUser() {\n    if (this.userForm.valid) {\n      const newUser = this.userForm.value; // Get the form data\n      // Call the createUser method from your user service\n      this.userService.createUser(newUser).subscribe(user => {\n        console.log('User added:', user);\n        // Optionally, reset the form\n        this.userForm.reset();\n      });\n    }\n  }\n  static #_ = this.ɵfac = function AdmissionComponent_Factory(t) {\n    return new (t || AdmissionComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ClasseroomService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AdmissionComponent,\n    selectors: [[\"app-admission\"]],\n    decls: 2,\n    vars: 0,\n    template: function AdmissionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"admission\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".bar-information[_ngcontent-%COMP%]{\\n   \\n   width: 100%;\\n   padding: 10px;\\n\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYWRtaXNzaW9uL2FkbWlzc2lvbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHLFdBQVc7R0FDWCxhQUFhOztBQUVoQiIsInNvdXJjZXNDb250ZW50IjpbIi5iYXItaW5mb3JtYXRpb257XHJcbiAgIFxyXG4gICB3aWR0aDogMTAwJTtcclxuICAgcGFkZGluZzogMTBweDtcclxuXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["FormGroup","Validators","AdmissionComponent","constructor","userService","formBuilder","Cla","users","userForm","Classes","group","name","required","register","genre","dateN","adresse","role","father","profession","nationalId","educat","mobile","email","ngOnInit","getClasse","subscribe","classe","console","log","addUser","valid","newUser","value","createUser","user","reset","_","i0","ɵɵdirectiveInject","i1","UserService","i2","FormBuilder","i3","ClasseroomService","_2","selectors","decls","vars","template","AdmissionComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\admission\\admission.component.ts","C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\admission\\admission.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../user.service';\nimport { IUser } from 'src/models';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ClasseroomService } from '../classeroom.service';\n@Component({\n  selector: 'app-admission',\n  templateUrl: './admission.component.html',\n  styleUrls: ['./admission.component.css']\n})\nexport class AdmissionComponent implements OnInit {\n  users: IUser[]=[];\n  userForm: FormGroup= new FormGroup({});\n  Classes: any[] = [];\n  constructor(private userService: UserService,\n    private formBuilder: FormBuilder,\n    private Cla:ClasseroomService) {\n    this.userForm = this.formBuilder.group({\nname: ['', Validators.required],\nregister: ['', Validators.required],\ngenre: ['', Validators.required],\ndateN: ['', Validators.required],\nadresse: ['', Validators.required],\nrole: ['', Validators.required],\nfather: ['', Validators.required],\nprofession: ['', Validators.required],\nnationalId: ['', Validators.required],\neducat: ['', Validators.required],\nmobile: ['', Validators.required],\nemail: ['', Validators.required],\n//salaire: ['', Validators.required],\n      \n    });\n  }\n  ngOnInit(): void {\n    this.Cla.getClasse()\n    .subscribe(classe =>{\n      this.Classes = classe\n      console.log(this.Classes);\n      \n    });\n  }\n  addUser() {\n    if (this.userForm.valid) {\n      const newUser = this.userForm.value; // Get the form data\n\n      // Call the createUser method from your user service\n      this.userService.createUser(newUser).subscribe((user) => {\n        console.log('User added:', user);\n        // Optionally, reset the form\n        this.userForm.reset();\n      });\n    }\n  }\n \n  \n}\n","<h1>admission</h1>"],"mappings":"AAGA,SAAsBA,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;AAOnE,OAAM,MAAOC,kBAAkB;EAI7BC,YAAoBC,WAAwB,EAClCC,WAAwB,EACxBC,GAAqB;IAFX,KAAAF,WAAW,GAAXA,WAAW;IACrB,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,GAAG,GAAHA,GAAG;IALb,KAAAC,KAAK,GAAU,EAAE;IACjB,KAAAC,QAAQ,GAAa,IAAIR,SAAS,CAAC,EAAE,CAAC;IACtC,KAAAS,OAAO,GAAU,EAAE;IAIjB,IAAI,CAACD,QAAQ,GAAG,IAAI,CAACH,WAAW,CAACK,KAAK,CAAC;MAC3CC,IAAI,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MAC/BC,QAAQ,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACW,QAAQ,CAAC;MACnCE,KAAK,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACW,QAAQ,CAAC;MAChCG,KAAK,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACW,QAAQ,CAAC;MAChCI,OAAO,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACW,QAAQ,CAAC;MAClCK,IAAI,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACW,QAAQ,CAAC;MAC/BM,MAAM,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACW,QAAQ,CAAC;MACjCO,UAAU,EAAE,CAAC,EAAE,EAAElB,UAAU,CAACW,QAAQ,CAAC;MACrCQ,UAAU,EAAE,CAAC,EAAE,EAAEnB,UAAU,CAACW,QAAQ,CAAC;MACrCS,MAAM,EAAE,CAAC,EAAE,EAAEpB,UAAU,CAACW,QAAQ,CAAC;MACjCU,MAAM,EAAE,CAAC,EAAE,EAAErB,UAAU,CAACW,QAAQ,CAAC;MACjCW,KAAK,EAAE,CAAC,EAAE,EAAEtB,UAAU,CAACW,QAAQ;MAC/B;KAEK,CAAC;EACJ;;EACAY,QAAQA,CAAA;IACN,IAAI,CAAClB,GAAG,CAACmB,SAAS,EAAE,CACnBC,SAAS,CAACC,MAAM,IAAG;MAClB,IAAI,CAAClB,OAAO,GAAGkB,MAAM;MACrBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACpB,OAAO,CAAC;IAE3B,CAAC,CAAC;EACJ;EACAqB,OAAOA,CAAA;IACL,IAAI,IAAI,CAACtB,QAAQ,CAACuB,KAAK,EAAE;MACvB,MAAMC,OAAO,GAAG,IAAI,CAACxB,QAAQ,CAACyB,KAAK,CAAC,CAAC;MAErC;MACA,IAAI,CAAC7B,WAAW,CAAC8B,UAAU,CAACF,OAAO,CAAC,CAACN,SAAS,CAAES,IAAI,IAAI;QACtDP,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEM,IAAI,CAAC;QAChC;QACA,IAAI,CAAC3B,QAAQ,CAAC4B,KAAK,EAAE;MACvB,CAAC,CAAC;;EAEN;EAAC,QAAAC,CAAA,G;qBA3CUnC,kBAAkB,EAAAoC,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,iBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAlB5C,kBAAkB;IAAA6C,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCV/Bd,EAAA,CAAAgB,cAAA,SAAI;QAAAhB,EAAA,CAAAiB,MAAA,gBAAS;QAAAjB,EAAA,CAAAkB,YAAA,EAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}