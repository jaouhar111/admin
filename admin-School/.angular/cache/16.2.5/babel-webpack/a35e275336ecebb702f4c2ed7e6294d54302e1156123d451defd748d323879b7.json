{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let CollectionComponent = class CollectionComponent {\n  constructor(route, user, Cla, payment) {\n    this.route = route;\n    this.user = user;\n    this.Cla = Cla;\n    this.payment = payment;\n    this.today = '';\n    //data: any = [];\n    this.mens = \"1500\";\n    this.dts = \"\";\n    this.insc = '';\n    this.trsp = '';\n    this.uni = '';\n    this.art = '';\n    this.dataType = '';\n    this.total = 0;\n    this.Classes = [];\n    this.Students = [];\n    this.selectedClassroom = null;\n    this.cc = null;\n    this.selectedStudent = null;\n    this.showMessage = false;\n    this.successMessage = '';\n  }\n  ngOnInit() {\n    this.Cla.getClasse().subscribe(classe => {\n      this.Classes = classe;\n    });\n    this.loadStudents();\n  }\n  loadStudents() {\n    // Get the selected classroom based on its _id\n    const selectedClassroom = this.Classes.find(classroom => classroom._id === this.selectedClassroom);\n    // Populate the students array with students from the selected classroom\n    if (selectedClassroom) {\n      this.Students = selectedClassroom.students;\n      this.cc = selectedClassroom.name;\n    } else {\n      this.Students = [];\n    }\n  }\n  totalTTc() {\n    this.total = parseInt(this.mens) + parseInt(this.insc) + parseInt(this.trsp) + parseInt(this.uni) + parseInt(this.art);\n  }\n  getSelectedStudent() {\n    // Find the selected student in the Students array based on some criteria\n    const selectedStudent = this.Students.find(student => student._id === this.dataType);\n    // Check if the selected student was found\n    if (selectedStudent) {\n      // Assign the selected student to the selectedStudent variable\n      this.selectedStudent = selectedStudent;\n    } else {\n      // If the student was not found, you can handle this case as needed\n      this.selectedStudent = null;\n      // Optionally, you can show an error message or take other actions.\n    }\n  }\n\n  addPayment() {\n    const paymentData = {\n      userId: this.dataType,\n      amount: parseInt(this.mens) + parseInt(this.insc) + parseInt(this.trsp) + parseInt(this.uni) + parseInt(this.art),\n      paymentDate: this.today,\n      paymentType: 'collectionFee'\n      // Replace with the payment type (e.g., 'collectionFee' or 'regularPayment')\n      // Add any other payment details as needed\n    };\n\n    this.payment.createPayment(paymentData).subscribe(response => {\n      console.log('Payment added successfully:', response);\n      // You can perform additional actions after a successful payment creation\n      console.log(this.today);\n    }, error => {\n      console.error('Error adding payment:', error);\n      // Handle errors appropriately (e.g., show an error message to the user)\n    });\n  }\n\n  checkEmployeePaymentStatus() {\n    this.payment.hasEmployeeBeenPaidThisMonth(this.dataType, this.today).subscribe(hasBeenPaid => {\n      if (hasBeenPaid) {\n        // Employee has already been paid for this month, handle accordingly\n        // console.log('Employee has already been paid for this month.');\n        this.successMessage = 'Student has already paid for this month' + this.today, this.showSuccessMessage();\n      } else {\n        // Employee has not been paid for this month, proceed with adding a new payment\n        this.addPayment();\n        this.successMessage = 'Payment added successfully', this.showSuccessMessage();\n      }\n    }, error => {\n      console.error('Error checking payment status:', error);\n      // Handle errors appropriately\n    });\n  }\n\n  showSuccessMessage() {\n    //this.successMessage = 'Classe ajoutée avec succès';\n    this.showMessage = true;\n    // Hide the message after a certain time (e.g., 5 seconds)\n    setTimeout(() => {\n      this.showMessage = false;\n      this.successMessage = '';\n      // this.router.navigate(['/dashboard/classe']);\n    }, 5000);\n  }\n};\nCollectionComponent = __decorate([Component({\n  selector: 'app-collection',\n  templateUrl: './collection.component.html',\n  styleUrls: ['./collection.component.css']\n})], CollectionComponent);","map":{"version":3,"names":["Component","CollectionComponent","constructor","route","user","Cla","payment","today","mens","dts","insc","trsp","uni","art","dataType","total","Classes","Students","selectedClassroom","cc","selectedStudent","showMessage","successMessage","ngOnInit","getClasse","subscribe","classe","loadStudents","find","classroom","_id","students","name","totalTTc","parseInt","getSelectedStudent","student","addPayment","paymentData","userId","amount","paymentDate","paymentType","createPayment","response","console","log","error","checkEmployeePaymentStatus","hasEmployeeBeenPaidThisMonth","hasBeenPaid","showSuccessMessage","setTimeout","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\collection\\collection.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IClassroom, IUser } from 'src/models';\n\n@Component({\n  selector: 'app-collection',\n  templateUrl: './collection.component.html',\n  styleUrls: ['./collection.component.css']\n})\nexport class CollectionComponent implements OnInit {\n  today:string='';\n  //data: any = [];\n  mens=\"1500\";\n  dts=\"\";\n  insc='';\n  trsp='';\n  uni='';\n  art='';\n  dataType=''\n  total:number=0\n  Classes:IClassroom[]=[];\n  Students:IUser [] = [];\n  selectedClassroom: string | null = null;\n  cc: String | null = null;\n  selectedStudent: IUser | null = null;\n  showMessage = false;\n  successMessage = '';\n\n  constructor(private route:ActivatedRoute,private user:UserService,private Cla:ClasseroomService,private payment:PaymentService){}\n    ngOnInit(): void {\n      this.Cla.getClasse()\n    .subscribe(classe =>{\n      this.Classes= classe;\n    });\n    this.loadStudents();\n    }\n    loadStudents(): void {\n      // Get the selected classroom based on its _id\n      const selectedClassroom = this.Classes.find(\n        (classroom) => classroom._id === this.selectedClassroom\n\n      );\n  \n      // Populate the students array with students from the selected classroom\n      if (selectedClassroom) {\n        this.Students = selectedClassroom.students;\n        this.cc=selectedClassroom.name\n        \n      } else {\n        this.Students = [];\n      }\n    }\n    totalTTc(){\n      this.total= parseInt(this.mens)+parseInt(this.insc)+parseInt(this.trsp)+parseInt(this.uni)+parseInt(this.art)\n    }\n    getSelectedStudent(): void {\n      // Find the selected student in the Students array based on some criteria\n      const selectedStudent = this.Students.find(\n        (student) => student._id === this.dataType\n      );\n    \n      // Check if the selected student was found\n      if (selectedStudent) {\n        // Assign the selected student to the selectedStudent variable\n        this.selectedStudent = selectedStudent;\n      } else {\n        // If the student was not found, you can handle this case as needed\n        this.selectedStudent = null;\n        // Optionally, you can show an error message or take other actions.\n      }\n    }\n    addPayment(): void {\n      const paymentData = {\n        userId: this.dataType, // Replace with the user ID for whom the payment is being made\n        amount: parseInt(this.mens)+parseInt(this.insc)+parseInt(this.trsp)+parseInt(this.uni)+parseInt(this.art),  // Replace with the payment amount\n        paymentDate: this.today,  // Replace with the payment date\n        paymentType: 'collectionFee',\n          // Replace with the payment type (e.g., 'collectionFee' or 'regularPayment')\n        // Add any other payment details as needed\n        \n        \n      };\n    \n      this.payment.createPayment(paymentData).subscribe(\n        (response) => {\n          console.log('Payment added successfully:', response);\n          // You can perform additional actions after a successful payment creation\n          console.log(this.today);\n        },\n        (error) => {\n          console.error('Error adding payment:', error);\n          // Handle errors appropriately (e.g., show an error message to the user)\n        }\n      );\n    }\n    checkEmployeePaymentStatus(): void {\n      this.payment.hasEmployeeBeenPaidThisMonth(this.dataType,this.today).subscribe(\n        (hasBeenPaid) => {\n          if (hasBeenPaid) {\n            // Employee has already been paid for this month, handle accordingly\n           // console.log('Employee has already been paid for this month.');\n            this.successMessage='Student has already paid for this month'+this.today,\n            this.showSuccessMessage();\n          } else {\n            // Employee has not been paid for this month, proceed with adding a new payment\n            this.addPayment();\n            this.successMessage='Payment added successfully',\n            this.showSuccessMessage();\n          }\n        },\n        (error) => {\n          console.error('Error checking payment status:', error);\n          // Handle errors appropriately\n        }\n      );\n    }\n    showSuccessMessage() {\n      //this.successMessage = 'Classe ajoutée avec succès';\n      this.showMessage = true;\n    \n      // Hide the message after a certain time (e.g., 5 seconds)\n      setTimeout(() => {\n        this.showMessage = false;\n        this.successMessage = '';\n       // this.router.navigate(['/dashboard/classe']);\n      }, 5000);\n      \n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}