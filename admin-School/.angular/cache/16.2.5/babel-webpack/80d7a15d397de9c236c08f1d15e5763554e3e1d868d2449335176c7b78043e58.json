{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PaymentService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:9000/api'; // Replace with your API URL\n  }\n\n  createPayment(paymentData) {\n    return this.http.post(`${this.apiUrl}/payments`, paymentData);\n  }\n  getAllPayments() {\n    return this.http.get(`${this.apiUrl}/payments`).pipe(tap(payment => console.log(\"payment\", payment)));\n  }\n  getPaymentById(paymentId) {\n    return this.http.get(`${this.apiUrl}/payments/${paymentId}`);\n  }\n  updatePayment(paymentId, paymentData) {\n    return this.http.put(`${this.apiUrl}/payments/${paymentId}`, paymentData);\n  }\n  deletePayment(paymentId) {\n    return this.http.delete(`${this.apiUrl}/payments/${paymentId}`);\n  }\n  hasEmployeeBeenPaidThisMonth(employeeId, inputDateStr) {\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth() + 1; // Adding 1 because getMonth() is zero-based\n    const currentYear = currentDate.getFullYear();\n    try {\n      // Parse the input date string into a Date object\n      const inputDate = new Date(inputDateStr);\n      // Get the month and year of the input date\n      const inputMonth = inputDate.getMonth() + 1;\n      const inputYear = inputDate.getFullYear();\n      // Compare the current month and year with the input date's month and year\n      const isPaidThisMonth = currentMonth === inputMonth && currentYear === inputYear;\n      if (isPaidThisMonth) {\n        const url = `${this.apiUrl}/payments/${employeeId}/checkPayment?month=${currentMonth}&year=${currentYear}`;\n        console.log(isPaidThisMonth);\n        return this.http.get(url);\n      } else {\n        const url = `${this.apiUrl}/payments/${employeeId}/checkPayment?month=${inputMonth}&year=${inputYear}`;\n        return this.http.get(url);\n      }\n      // Define the URL to fetch payment records for the employee in the current month\n    } catch (error) {\n      console.error(\"Error parsing input date:\", error);\n      return of(false); // Return false in case of an error\n    }\n  }\n  static #_ = this.ɵfac = function PaymentService_Factory(t) {\n    return new (t || PaymentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PaymentService,\n    factory: PaymentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["PaymentService","constructor","http","apiUrl","createPayment","paymentData","post","getAllPayments","get","pipe","tap","payment","console","log","getPaymentById","paymentId","updatePayment","put","deletePayment","delete","hasEmployeeBeenPaidThisMonth","employeeId","inputDateStr","currentDate","Date","currentMonth","getMonth","currentYear","getFullYear","inputDate","inputMonth","inputYear","isPaidThisMonth","url","error","of","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\payment.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentService {\n  private apiUrl = 'http://localhost:9000/api'; // Replace with your API URL\n\n  constructor(private http: HttpClient) {}\n\n  createPayment(paymentData: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/payments`, paymentData);\n  }\n\n  getAllPayments(): Observable<any> {\n    return this.http.get(`${this.apiUrl}/payments`).pipe(\n      tap(payment=>console.log(\"payment\",payment)),\n    );\n  }\n\n  getPaymentById(paymentId: string): Observable<any> {\n    return this.http.get(`${this.apiUrl}/payments/${paymentId}`);\n  }\n\n  updatePayment(paymentId: string, paymentData: any): Observable<any> {\n    return this.http.put(`${this.apiUrl}/payments/${paymentId}`, paymentData);\n  }\n\n  deletePayment(paymentId: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/payments/${paymentId}`);\n  }\n  hasEmployeeBeenPaidThisMonth(employeeId: string, inputDateStr: string): Observable<boolean> {\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth() + 1; // Adding 1 because getMonth() is zero-based\n    const currentYear = currentDate.getFullYear();\n    try {\n      // Parse the input date string into a Date object\n      const inputDate = new Date(inputDateStr);\n\n      // Get the month and year of the input date\n      const inputMonth = inputDate.getMonth() + 1;\n      const inputYear = inputDate.getFullYear();\n\n      // Compare the current month and year with the input date's month and year\n      const isPaidThisMonth = currentMonth === inputMonth && currentYear === inputYear;\n        if (isPaidThisMonth) {\n          const url = `${this.apiUrl}/payments/${employeeId}/checkPayment?month=${currentMonth}&year=${currentYear}`;\n          console.log(isPaidThisMonth);\n          return this.http.get<boolean>(url);\n        } else {\n          const url = `${this.apiUrl}/payments/${employeeId}/checkPayment?month=${inputMonth}&year=${inputYear}`;\n          return this.http.get<boolean>(url);\n        }\n      // Define the URL to fetch payment records for the employee in the current month\n      \n  } catch (error) {\n      console.error(\"Error parsing input date:\", error);\n      return of(false); // Return false in case of an error\n  }\n  }\n}\n"],"mappings":";;AAMA,OAAM,MAAOA,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,2BAA2B,CAAC,CAAC;EAEP;;EAEvCC,aAAaA,CAACC,WAAgB;IAC5B,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACH,MAAM,WAAW,EAAEE,WAAW,CAAC;EAC/D;EAEAE,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAC,GAAG,IAAI,CAACL,MAAM,WAAW,CAAC,CAACM,IAAI,CAClDC,GAAG,CAACC,OAAO,IAAEC,OAAO,CAACC,GAAG,CAAC,SAAS,EAACF,OAAO,CAAC,CAAC,CAC7C;EACH;EAEAG,cAAcA,CAACC,SAAiB;IAC9B,OAAO,IAAI,CAACb,IAAI,CAACM,GAAG,CAAC,GAAG,IAAI,CAACL,MAAM,aAAaY,SAAS,EAAE,CAAC;EAC9D;EAEAC,aAAaA,CAACD,SAAiB,EAAEV,WAAgB;IAC/C,OAAO,IAAI,CAACH,IAAI,CAACe,GAAG,CAAC,GAAG,IAAI,CAACd,MAAM,aAAaY,SAAS,EAAE,EAAEV,WAAW,CAAC;EAC3E;EAEAa,aAAaA,CAACH,SAAiB;IAC7B,OAAO,IAAI,CAACb,IAAI,CAACiB,MAAM,CAAC,GAAG,IAAI,CAAChB,MAAM,aAAaY,SAAS,EAAE,CAAC;EACjE;EACAK,4BAA4BA,CAACC,UAAkB,EAAEC,YAAoB;IACnE,MAAMC,WAAW,GAAG,IAAIC,IAAI,EAAE;IAC9B,MAAMC,YAAY,GAAGF,WAAW,CAACG,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;IACjD,MAAMC,WAAW,GAAGJ,WAAW,CAACK,WAAW,EAAE;IAC7C,IAAI;MACF;MACA,MAAMC,SAAS,GAAG,IAAIL,IAAI,CAACF,YAAY,CAAC;MAExC;MACA,MAAMQ,UAAU,GAAGD,SAAS,CAACH,QAAQ,EAAE,GAAG,CAAC;MAC3C,MAAMK,SAAS,GAAGF,SAAS,CAACD,WAAW,EAAE;MAEzC;MACA,MAAMI,eAAe,GAAGP,YAAY,KAAKK,UAAU,IAAIH,WAAW,KAAKI,SAAS;MAC9E,IAAIC,eAAe,EAAE;QACnB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAAC9B,MAAM,aAAakB,UAAU,uBAAuBI,YAAY,SAASE,WAAW,EAAE;QAC1Gf,OAAO,CAACC,GAAG,CAACmB,eAAe,CAAC;QAC5B,OAAO,IAAI,CAAC9B,IAAI,CAACM,GAAG,CAAUyB,GAAG,CAAC;OACnC,MAAM;QACL,MAAMA,GAAG,GAAG,GAAG,IAAI,CAAC9B,MAAM,aAAakB,UAAU,uBAAuBS,UAAU,SAASC,SAAS,EAAE;QACtG,OAAO,IAAI,CAAC7B,IAAI,CAACM,GAAG,CAAUyB,GAAG,CAAC;;MAEtC;KAEH,CAAC,OAAOC,KAAK,EAAE;MACZtB,OAAO,CAACsB,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAOC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEtB;EAAC,QAAAC,CAAA,G;qBAtDUpC,cAAc,EAAAqC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdzC,cAAc;IAAA0C,OAAA,EAAd1C,cAAc,CAAA2C,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}