{"ast":null,"code":"import { catchError, tap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ClasseroomService {\n  constructor(http) {\n    this.http = http;\n    this.classes = new BehaviorSubject([]);\n    this.classes$ = this.classes.asObservable();\n    this.url = \"http://localhost:9000/api/classes\";\n  }\n  getClasse() {\n    return this.http.get(this.url).pipe(tap(classe => {}), catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n  deleteClasse(id) {\n    // Make an HTTP DELETE request to delete the class by ID\n    return this.http.delete(`${this.url}/${id}`).pipe(tap(() => {\n      // Update the classes list by removing the deleted class\n      const currentClasses = this.classes.getValue();\n      const updatedClasses = currentClasses.filter(classe => classe.id !== id);\n      this.classes.next(updatedClasses);\n    }), catchError(this.handleError));\n  }\n  static #_ = this.ɵfac = function ClasseroomService_Factory(t) {\n    return new (t || ClasseroomService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClasseroomService,\n    factory: ClasseroomService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","tap","throwError","ClasseroomService","constructor","http","classes","BehaviorSubject","classes$","asObservable","url","getClasse","get","pipe","classe","handleError","error","status","console","Error","deleteClasse","id","delete","currentClasses","getValue","updatedClasses","filter","next","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\classeroom.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, tap, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClasseroomService {\n  classes: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n  classes$: Observable<any[]> = this.classes.asObservable();\n  private readonly url=\"http://localhost:9000/api/classes\";\n  constructor(private http:HttpClient) { \n    \n  }\n\n  public getClasse():Observable<any>\n  {\n    return this.http.get(this.url).pipe(\n      tap((classe:any) => {\n        \n        \n      }),\n      catchError(this.handleError)\n    );\n  }\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n\n  deleteClasse(id: string): Observable<any> {\n    // Make an HTTP DELETE request to delete the class by ID\n    return this.http.delete(`${this.url}/${id}`).pipe(\n      tap(() => {\n        // Update the classes list by removing the deleted class\n        const currentClasses = this.classes.getValue();\n        const updatedClasses = currentClasses.filter((classe) => classe.id !== id);\n        this.classes.next(updatedClasses);\n      }),\n      catchError(this.handleError)\n    );\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;;;AAK9D,OAAM,MAAOC,iBAAiB;EAI5BC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAHxB,KAAAC,OAAO,GAA2B,IAAIC,eAAe,CAAQ,EAAE,CAAC;IAChE,KAAAC,QAAQ,GAAsB,IAAI,CAACF,OAAO,CAACG,YAAY,EAAE;IACxC,KAAAC,GAAG,GAAC,mCAAmC;EAGxD;EAEOC,SAASA,CAAA;IAEd,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAC,IAAI,CAACF,GAAG,CAAC,CAACG,IAAI,CACjCZ,GAAG,CAAEa,MAAU,IAAI,CAGnB,CAAC,CAAC,EACFd,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAC7B;EACH;EACQA,WAAWA,CAACC,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtB;MACAC,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACL;MACA;MACAE,OAAO,CAACF,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EAAED,KAAK,CAACA,KAAK,CAAC;;IAErE;IACA,OAAOd,UAAU,CAAC,MAAM,IAAIiB,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;EAEAC,YAAYA,CAACC,EAAU;IACrB;IACA,OAAO,IAAI,CAAChB,IAAI,CAACiB,MAAM,CAAC,GAAG,IAAI,CAACZ,GAAG,IAAIW,EAAE,EAAE,CAAC,CAACR,IAAI,CAC/CZ,GAAG,CAAC,MAAK;MACP;MACA,MAAMsB,cAAc,GAAG,IAAI,CAACjB,OAAO,CAACkB,QAAQ,EAAE;MAC9C,MAAMC,cAAc,GAAGF,cAAc,CAACG,MAAM,CAAEZ,MAAM,IAAKA,MAAM,CAACO,EAAE,KAAKA,EAAE,CAAC;MAC1E,IAAI,CAACf,OAAO,CAACqB,IAAI,CAACF,cAAc,CAAC;IACnC,CAAC,CAAC,EACFzB,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAC7B;EACH;EAAC,QAAAa,CAAA,G;qBA3CUzB,iBAAiB,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjB9B,iBAAiB;IAAA+B,OAAA,EAAjB/B,iBAAiB,CAAAgC,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}