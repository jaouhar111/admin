{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Chart, registerables } from 'node_modules/chart.js';\nChart.register(...registerables);\nexport let BarChartsComponent = class BarChartsComponent {\n  constructor(Cla, paie) {\n    this.Cla = Cla;\n    this.paie = paie;\n    this.paymentData = [];\n    this.months = [];\n    this.totalRegularPayments = [];\n    this.totalCollectionFees = [];\n  }\n  ngOnInit() {\n    this.paie.getAllPayments().subscribe(data => {\n      this.paymentData = data;\n      // Extract unique months for labels\n      this.months = this.extractMonths(data);\n      // Calculate total regular payments and collection fees per month\n      this.calculateTotalPaymentsPerMonth();\n    });\n  }\n  extractMonths(data) {\n    const uniqueMonths = new Set();\n    data.forEach(item => {\n      const paymentDate = new Date(item.paymentDate);\n      const monthYear = `${paymentDate.getFullYear()}-${paymentDate.getMonth() + 1}`;\n      uniqueMonths.add(monthYear);\n    });\n    return Array.from(uniqueMonths);\n  }\n  calculateTotalPaymentsPerMonth() {\n    this.months.forEach(month => {\n      const regularPaymentsForMonth = this.paymentData.filter(item => item.paymentType === 'regularPayment' && this.getMonthYear(item.paymentDate) === month).reduce((total, item) => total + item.amount, 0);\n      const collectionFeesForMonth = this.paymentData.filter(item => item.paymentType === 'collectionFee' && this.getMonthYear(item.paymentDate) === month).reduce((total, item) => total + item.amount, 0);\n      this.totalRegularPayments.push(regularPaymentsForMonth);\n      this.totalCollectionFees.push(collectionFeesForMonth);\n    });\n    // Create and update the chart\n    this.renderChart();\n  }\n  getMonthYear(date) {\n    const dateObject = new Date(date);\n    const month = dateObject.getMonth() + 1;\n    const year = dateObject.getFullYear();\n    return `${year}-${month}`;\n  }\n  renderChart() {\n    const ctx = document.getElementById('linechart');\n    const mychart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: this.months,\n        datasets: [{\n          label: 'Total Regular Payments',\n          data: this.totalRegularPayments,\n          backgroundColor: 'rgba(0, 123, 255, 0.2)',\n          borderColor: 'rgb(0, 123, 255)',\n          borderWidth: 1\n        }, {\n          label: 'Total Collection Fees',\n          data: this.totalCollectionFees,\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          borderColor: 'rgb(255, 99, 132)',\n          borderWidth: 1\n        }]\n      },\n      options: {\n        responsive: true,\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Month'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Amount'\n            }\n          }\n        }\n      }\n    });\n  }\n};\nBarChartsComponent = __decorate([Component({\n  selector: 'app-bar-charts',\n  templateUrl: './bar-charts.component.html',\n  styleUrls: ['./bar-charts.component.css']\n})], BarChartsComponent);","map":{"version":3,"names":["Component","Chart","registerables","register","BarChartsComponent","constructor","Cla","paie","paymentData","months","totalRegularPayments","totalCollectionFees","ngOnInit","getAllPayments","subscribe","data","extractMonths","calculateTotalPaymentsPerMonth","uniqueMonths","Set","forEach","item","paymentDate","Date","monthYear","getFullYear","getMonth","add","Array","from","month","regularPaymentsForMonth","filter","paymentType","getMonthYear","reduce","total","amount","collectionFeesForMonth","push","renderChart","date","dateObject","year","ctx","document","getElementById","mychart","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","scales","x","title","display","text","y","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\bar-charts\\bar-charts.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Chart, registerables } from 'node_modules/chart.js';\nChart.register(...registerables);\n@Component({\n  selector: 'app-bar-charts',\n  templateUrl: './bar-charts.component.html',\n  styleUrls: ['./bar-charts.component.css']\n})\nexport class BarChartsComponent {\n  paymentData: any[] = [];\n  months: string[] = [];\n  totalRegularPayments: number[] = [];\n  totalCollectionFees: number[] = [];\n  constructor(private Cla:ClasseroomService, private paie:PaymentService){}\n  ngOnInit(): void {\n    this.paie.getAllPayments().subscribe(data => {\n      this.paymentData = data;\n\n      // Extract unique months for labels\n      this.months = this.extractMonths(data);\n\n      // Calculate total regular payments and collection fees per month\n      this.calculateTotalPaymentsPerMonth();\n    });\n  }\n\n  extractMonths(data: Ipayment[]): string[] {\n    const uniqueMonths = new Set<string>();\n    data.forEach(item => {\n      const paymentDate = new Date(item.paymentDate);\n      const monthYear = `${paymentDate.getFullYear()}-${paymentDate.getMonth() + 1}`;\n      uniqueMonths.add(monthYear);\n    });\n    return Array.from(uniqueMonths);\n  }\n\n  calculateTotalPaymentsPerMonth(): void {\n    this.months.forEach(month => {\n      const regularPaymentsForMonth = this.paymentData\n        .filter(item => item.paymentType === 'regularPayment' && this.getMonthYear(item.paymentDate) === month)\n        .reduce((total, item) => total + item.amount, 0);\n\n      const collectionFeesForMonth = this.paymentData\n        .filter(item => item.paymentType === 'collectionFee' && this.getMonthYear(item.paymentDate) === month)\n        .reduce((total, item) => total + item.amount, 0);\n\n      this.totalRegularPayments.push(regularPaymentsForMonth);\n      this.totalCollectionFees.push(collectionFeesForMonth);\n    });\n\n    // Create and update the chart\n    this.renderChart();\n  }\n\n  getMonthYear(date: string): string {\n    const dateObject = new Date(date);\n    const month = dateObject.getMonth() + 1;\n    const year = dateObject.getFullYear();\n    return `${year}-${month}`;\n  }\n\n  renderChart() {\n    const ctx = document.getElementById('linechart') as HTMLCanvasElement;\n\n    const mychart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: this.months,\n        datasets: [\n          {\n            label: 'Total Regular Payments',\n            data: this.totalRegularPayments,\n            backgroundColor: 'rgba(0, 123, 255, 0.2)',\n            borderColor: 'rgb(0, 123, 255)',\n            borderWidth: 1\n          },\n          {\n            label: 'Total Collection Fees',\n            data: this.totalCollectionFees,\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderColor: 'rgb(255, 99, 132)',\n            borderWidth: 1\n          }\n        ]\n      },\n      options: {\n        responsive: true,\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Month'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Amount'\n            }\n          }\n        }\n      }\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}