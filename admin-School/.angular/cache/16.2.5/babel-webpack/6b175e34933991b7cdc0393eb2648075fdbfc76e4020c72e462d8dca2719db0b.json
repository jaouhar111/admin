{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nexport let AdmissionComponent = class AdmissionComponent {\n  constructor(userService, formBuilder, router, route, Cla) {\n    this.userService = userService;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.route = route;\n    this.Cla = Cla;\n    this.users = [];\n    this.userForm = new FormGroup({});\n    this.Classes = [];\n    this.userForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      register: ['', Validators.required],\n      genre: ['', Validators.required],\n      dateN: ['', Validators.required],\n      adresse: ['', Validators.required],\n      role: ['Student', Validators.required],\n      father: ['', Validators.required],\n      profession: ['', Validators.required],\n      nationalId: ['', Validators.required],\n      education: ['', Validators.required],\n      mobile: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.dataType = params['type'];\n      this.id = params['id']; // Will be 'student' or 'employee'\n    });\n\n    this.Cla.getClasse().subscribe(classe => {\n      this.Classes = classe;\n      console.log(this.Classes);\n    });\n  }\n  addUser() {\n    if (this.userForm.valid) {\n      // The form is valid, you can access the form values using this.userForm.value\n      const newUser = this.userForm.value;\n      // Call the createUser method from your user service\n      this.userService.createUser(newUser).subscribe(user => {\n        console.log('User added:', user);\n        // Optionally, reset the form\n        this.userForm.reset();\n      });\n    } else {\n      // The form is invalid, so you can inspect the form controls for specific errors\n      Object.keys(this.userForm.controls).forEach(key => {\n        const control = this.userForm.get(key);\n        if (control && control.invalid) {\n          console.log(`Form control \"${key}\" has the following errors:`, control.errors);\n        }\n      });\n    }\n  }\n};\nAdmissionComponent = __decorate([Component({\n  selector: 'app-admission',\n  templateUrl: './admission.component.html',\n  styleUrls: ['./admission.component.css']\n})], AdmissionComponent);","map":{"version":3,"names":["Component","FormGroup","Validators","AdmissionComponent","constructor","userService","formBuilder","router","route","Cla","users","userForm","Classes","group","name","required","register","genre","dateN","adresse","role","father","profession","nationalId","education","mobile","email","password","ngOnInit","params","subscribe","dataType","id","getClasse","classe","console","log","addUser","valid","newUser","value","createUser","user","reset","Object","keys","controls","forEach","key","control","get","invalid","errors","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\admission\\admission.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../user.service';\nimport { IUser } from 'src/models';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ClasseroomService } from '../classeroom.service';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-admission',\n  templateUrl: './admission.component.html',\n  styleUrls: ['./admission.component.css']\n})\nexport class AdmissionComponent implements OnInit {\n  users: IUser[]=[];\n  userForm: FormGroup= new FormGroup({});\n  Classes: any[] = [];\n  constructor(private userService: UserService,\n    private formBuilder: FormBuilder,\n    private router:Router,\n    private route: ActivatedRoute\n    private Cla:ClasseroomService) {\n    this.userForm = this.formBuilder.group({\nname: ['', Validators.required],\nregister: ['', Validators.required],\ngenre: ['', Validators.required],\ndateN: ['', Validators.required],\nadresse: ['', Validators.required],\nrole: ['Student',Validators.required],\nfather: ['', Validators.required],\nprofession: ['', Validators.required],\nnationalId: ['', Validators.required],\neducation: ['', Validators.required],\nmobile: ['', Validators.required],\nemail: ['', Validators.required],\npassword: ['', Validators.required],\n\n      \n    });\n  }\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      this.dataType = params['type'];\n      this.id=params['id'] // Will be 'student' or 'employee'\n    });\n    this.Cla.getClasse()\n    .subscribe(classe =>{\n      this.Classes = classe\n      console.log(this.Classes);\n      \n    });\n  }\n  addUser() {\n    if (this.userForm.valid) {\n      // The form is valid, you can access the form values using this.userForm.value\n      const newUser = this.userForm.value;\n      \n      // Call the createUser method from your user service\n      this.userService.createUser(newUser).subscribe((user) => {\n        console.log('User added:', user);\n        // Optionally, reset the form\n        this.userForm.reset();\n      });\n    } else {\n      // The form is invalid, so you can inspect the form controls for specific errors\n      Object.keys(this.userForm.controls).forEach((key) => {\n        const control = this.userForm.get(key);\n        if (control && control.invalid) {\n          console.log(`Form control \"${key}\" has the following errors:`, control.errors);\n        }\n      });\n    }\n  }\n  \n \n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}