{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let DashboardComponent = class DashboardComponent {\n  constructor(userService, att, Cla, paie) {\n    this.userService = userService;\n    this.att = att;\n    this.Cla = Cla;\n    this.paie = paie;\n    this.thisMonthFees = 0;\n    this.totalFees = 0;\n    this.feeCollectionPercentage = 0;\n    this.totalAmounts = {\n      regular: 0,\n      collection: 0\n    };\n    this.profite = 0;\n    this.paymentData = [];\n    this.totalRegularPayments = [];\n    this.totalCollectionFees = [];\n    this.absentPercentage = 0;\n    this.precencePercentage = 0;\n    this.amount = 0;\n    this.ttcEtudient = 0;\n    this.students = [];\n    this.Teachers = [];\n    this.attemp = [];\n    this.attstu = [];\n    this.collectionPercentage = 0;\n  }\n  ngOnInit() {\n    this.getStudent();\n    this.getProf();\n    this.getattEmp();\n    this.getattStu();\n    this.calculateAbsentPercentage();\n    this.calculatepresentPercentage();\n    this.feepercent();\n  }\n  getStudent() {\n    this.paie.getAllPayments().subscribe(data => {\n      this.paymentData = data;\n      this.paymentData.forEach(payment => {\n        const paymentType = payment.paymentType;\n        const amount = payment.amount;\n        // Check the payment type and accumulate the amount accordingly\n        if (paymentType === 'regularPayment') {\n          this.totalAmounts.regular += amount;\n        } else if (paymentType === 'collectionFee') {\n          this.totalAmounts.collection += amount;\n        }\n      });\n      // Now, totalAmounts contains the total amount for \"regular\" and \"collection\" payment types\n      //console.log(this.totalAmounts);\n      //console.log(this.totalAmounts.collection-this.totalAmounts.regular);\n      this.profite = this.totalAmounts.collection - this.totalAmounts.regular;\n      this.amount = this.totalAmounts.collection;\n    });\n    this.userService.getAll().subscribe(data => {\n      // Filter users by role 'student'\n      this.students = data.filter(user => user.role === 'Student');\n    });\n  }\n  getProf() {\n    this.userService.getAll().subscribe(data => {\n      // Filter users by role 'student'\n      this.Teachers = data.filter(user => user.role !== 'Student');\n      //console.log(\"all teachers\"+JSON.stringify(this.Teachers));\n    });\n  }\n\n  getattEmp() {\n    const currentDate = new Date(); // Get the current date\n    this.att.getAllAttendance().subscribe(data => {\n      const uniqueNames = new Set();\n      // Filter users by status 'Present' and date matching the current date\n      this.attemp = data.filter(user => user.status === 'Present').filter(user => user.iduser.role !== 'Student').filter(user => {\n        // Convert the date from the data to a JavaScript Date object\n        const attendanceDate = new Date(user.datenow);\n        // Check if the date matches the current date\n        if (attendanceDate.getDate() === currentDate.getDate() && attendanceDate.getMonth() === currentDate.getMonth() && attendanceDate.getFullYear() === currentDate.getFullYear()) {\n          // Check if the name is not already in the Set\n          if (!uniqueNames.has(user.iduser.name)) {\n            // Add the name to the Set\n            uniqueNames.add(user.iduser.name);\n            return true;\n          }\n        }\n        return false;\n      });\n      console.log(this.attemp);\n    });\n  }\n  getattStu() {\n    const currentDate = new Date(); // Get the current date\n    this.att.getAllAttendance().subscribe(data => {\n      const uniqueNames = new Set();\n      // Filter users by status 'Absent', role 'Student', and date matching the current date\n      this.attstu = data.filter(user => user.status === 'Absent').filter(user => user.iduser.role === 'Student').filter(user => {\n        // Convert the date from the data to a JavaScript Date object\n        const attendanceDate = new Date(user.datenow);\n        // Check if the date matches the current date\n        if (attendanceDate.getDate() === currentDate.getDate() && attendanceDate.getMonth() === currentDate.getMonth() && attendanceDate.getFullYear() === currentDate.getFullYear()) {\n          // Check if the name is not already in the Set\n          if (!uniqueNames.has(user.iduser.name)) {\n            // Add the name to the Set\n            uniqueNames.add(user.iduser.name);\n            return true;\n          }\n        }\n        return false;\n      });\n    });\n  }\n  calculateAbsentPercentage() {\n    //console.log(\"Total students:\", this.students.length);\n    // console.log(\"Absent students:\", this.attstu.length);\n    if (this.students.length > 0) {\n      return this.absentPercentage = this.attstu.length / this.students.length * 100;\n    } else {\n      return this.absentPercentage = 0; // Handle cases where there are no students\n    }\n    //console.log(\"Absent percentage:\", this.absentPercentage);\n  }\n\n  calculatepresentPercentage() {\n    //console.log(\"Total employee:\", this.Teachers.length);\n    //console.log(\"Absent students:\", this.attemp.length);\n    if (this.students.length > 0) {\n      return this.precencePercentage = this.attemp.length / this.Teachers.length * 100;\n    } else {\n      return this.precencePercentage = 0; // Handle cases where there are no students\n    }\n    //console.log(\"Absent percentage:\", this.absentPercentage);\n  }\n\n  feepercent() {\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth() + 1; // Adding 1 because getMonth() is zero-based\n    const currentYear = currentDate.getFullYear();\n    // Initialize variables for storing the total fees for this month and the total fees for all months\n    this.paie.getAllPayments().subscribe(data => {\n      this.paymentData = data;\n      // Iterate through the payment data to calculate the fees\n      this.paymentData.forEach(payment => {\n        const paymentDate = new Date(payment.paymentDate);\n        console.log(paymentDate);\n        const paymentMonth = paymentDate.getMonth() + 1;\n        const paymentYear = paymentDate.getFullYear();\n        // Check if the payment is for the current month and year\n        if (paymentMonth === currentMonth && paymentYear === currentYear && payment.paymentType === 'collectionFee') {\n          this.thisMonthFees += payment.amount;\n        }\n        // Accumulate all payments for the total fees\n        this.totalFees += payment.amount;\n      });\n      // Calculate the fee collection percentage for this month\n      this.feeCollectionPercentage = this.thisMonthFees / this.totalFees * 100;\n      console.log(`Fee collection for this month: $${this.thisMonthFees}`);\n      console.log(`Total fee collection: $${this.totalFees}`);\n      console.log(`Fee collection percentage for this month: ${this.feeCollectionPercentage.toFixed(2)}%`);\n    });\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);","map":{"version":3,"names":["Component","DashboardComponent","constructor","userService","att","Cla","paie","thisMonthFees","totalFees","feeCollectionPercentage","totalAmounts","regular","collection","profite","paymentData","totalRegularPayments","totalCollectionFees","absentPercentage","precencePercentage","amount","ttcEtudient","students","Teachers","attemp","attstu","collectionPercentage","ngOnInit","getStudent","getProf","getattEmp","getattStu","calculateAbsentPercentage","calculatepresentPercentage","feepercent","getAllPayments","subscribe","data","forEach","payment","paymentType","getAll","filter","user","role","currentDate","Date","getAllAttendance","uniqueNames","Set","status","iduser","attendanceDate","datenow","getDate","getMonth","getFullYear","has","name","add","console","log","length","currentMonth","currentYear","paymentDate","paymentMonth","paymentYear","toFixed","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { IAttendance, IUser } from 'src/models';\nimport { UserService } from '../user.service';\nimport { AttendanceService } from '../attendance.service';\nimport { ClasseroomService } from '../classeroom.service';\nimport { PaymentService } from '../payment.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit{\n  thisMonthFees: number = 0;\n  totalFees: number = 0;\n  feeCollectionPercentage: number = 0;\n  totalAmounts = {\n    regular: 0,\n    collection: 0,\n    \n  };\n  profite=0\n  paymentData: any[] = [];\n  totalRegularPayments: number[] = [];\n  totalCollectionFees: number[] = [];\n  absentPercentage: number = 0;\n  precencePercentage: number = 0;\n  amount=0\n  ttcEtudient=0\n  students: IUser[] = [];\n  Teachers: any[] = [];\n  attemp:IAttendance[]=[];\n  attstu:IAttendance[]=[];\n  \n  collectionPercentage: number =0\n  constructor(private userService:UserService,private att:AttendanceService,private Cla:ClasseroomService,\n     private paie:PaymentService){}\n  ngOnInit(): void {\n    this.getStudent();\n    this.getProf();\n    this.getattEmp();\n    this.getattStu();\n    this.calculateAbsentPercentage();\n    this.calculatepresentPercentage();\n    this.feepercent();\n   \n  }\n  getStudent(){\n    this.paie.getAllPayments().subscribe(data => {\n      this.paymentData = data;\n      this.paymentData.forEach((payment) => {\n        \n        const paymentType = payment.paymentType;\n        const amount = payment.amount;\n      \n        // Check the payment type and accumulate the amount accordingly\n        if (paymentType === 'regularPayment') {\n          this.totalAmounts.regular += amount;\n        } else if (paymentType === 'collectionFee') {\n          this.totalAmounts.collection += amount;\n        }\n      });\n      \n      // Now, totalAmounts contains the total amount for \"regular\" and \"collection\" payment types\n      //console.log(this.totalAmounts);\n      //console.log(this.totalAmounts.collection-this.totalAmounts.regular);\n      this.profite=this.totalAmounts.collection-this.totalAmounts.regular\n      this.amount=this.totalAmounts.collection\n      \n\n    });\n    this.userService.getAll()\n  .subscribe((data: IUser[]) => {\n    // Filter users by role 'student'\n    this.students = data.filter(user => user.role === 'Student');\n    \n  });\n  }\n\n  getProf(){\n    this.userService.getAll()\n    .subscribe((data: IUser[]) => {\n      // Filter users by role 'student'\n      this.Teachers = data.filter(user => user.role !== 'Student');\n      //console.log(\"all teachers\"+JSON.stringify(this.Teachers));\n      \n\n    });\n  }\n\n  getattEmp() {\n    const currentDate = new Date(); // Get the current date\n  \n    this.att.getAllAttendance()\n      .subscribe((data: IAttendance[]) => {\n        const uniqueNames = new Set<string>();\n  \n        // Filter users by status 'Present' and date matching the current date\n        this.attemp = data\n          .filter(user => user.status === 'Present')\n          .filter(user => user.iduser.role !== 'Student')\n          .filter(user => {\n            // Convert the date from the data to a JavaScript Date object\n            const attendanceDate = new Date(user.datenow);\n  \n            // Check if the date matches the current date\n            if (\n              attendanceDate.getDate() === currentDate.getDate() &&\n              attendanceDate.getMonth() === currentDate.getMonth() &&\n              attendanceDate.getFullYear() === currentDate.getFullYear()\n            ) {\n              // Check if the name is not already in the Set\n              if (!uniqueNames.has(user.iduser.name)) {\n                // Add the name to the Set\n                uniqueNames.add(user.iduser.name);\n                return true;\n              }\n            }\n            return false;\n          });\n  \n        console.log(this.attemp);\n        \n      });\n  }\n  \n  getattStu() {\n    const currentDate = new Date(); // Get the current date\n  \n    this.att.getAllAttendance()\n      .subscribe((data: IAttendance[]) => {\n        const uniqueNames = new Set<string>();\n  \n        // Filter users by status 'Absent', role 'Student', and date matching the current date\n        this.attstu = data\n          .filter(user => user.status === 'Absent')\n          .filter(user => user.iduser.role === 'Student')\n          .filter(user => {\n            // Convert the date from the data to a JavaScript Date object\n            const attendanceDate = new Date(user.datenow);\n  \n            // Check if the date matches the current date\n            if (\n              attendanceDate.getDate() === currentDate.getDate() &&\n              attendanceDate.getMonth() === currentDate.getMonth() &&\n              attendanceDate.getFullYear() === currentDate.getFullYear()\n            ) {\n              // Check if the name is not already in the Set\n              if (!uniqueNames.has(user.iduser.name)) {\n                // Add the name to the Set\n                uniqueNames.add(user.iduser.name);\n                return true;\n              }\n            }\n            return false;\n          });\n  \n        \n      });\n  }\n  \n  \n  calculateAbsentPercentage() {\n    //console.log(\"Total students:\", this.students.length);\n   // console.log(\"Absent students:\", this.attstu.length);\n  \n    if (this.students.length > 0) {\n     return this.absentPercentage = (this.attstu.length / this.students.length) * 100;\n    } else {\n      return this.absentPercentage = 0; // Handle cases where there are no students\n    }\n  \n    //console.log(\"Absent percentage:\", this.absentPercentage);\n  }\n  calculatepresentPercentage() {\n    //console.log(\"Total employee:\", this.Teachers.length);\n    //console.log(\"Absent students:\", this.attemp.length);\n  \n    if (this.students.length > 0) {\n     return this.precencePercentage = (this.attemp.length / this.Teachers.length) * 100;\n    } else {\n      return this.precencePercentage = 0; // Handle cases where there are no students\n    }\n  \n    //console.log(\"Absent percentage:\", this.absentPercentage);\n  }\n\n  feepercent(){\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth() + 1; // Adding 1 because getMonth() is zero-based\n    const currentYear = currentDate.getFullYear();\n    \n    // Initialize variables for storing the total fees for this month and the total fees for all months\n    \n    \n    this.paie.getAllPayments().subscribe(data => {\n      this.paymentData = data;\n    \n      // Iterate through the payment data to calculate the fees\n      this.paymentData.forEach((payment) => {\n        const paymentDate = new Date(payment.paymentDate);\n        console.log(paymentDate);\n        \n        const paymentMonth = paymentDate.getMonth() + 1;\n        const paymentYear = paymentDate.getFullYear();\n        \n        // Check if the payment is for the current month and year\n        if (paymentMonth === currentMonth && paymentYear === currentYear && payment.paymentType === 'collectionFee') {\n          this.thisMonthFees += payment.amount;\n        }\n    \n        // Accumulate all payments for the total fees\n        this.totalFees += payment.amount;\n      });\n    \n      // Calculate the fee collection percentage for this month\n      this.feeCollectionPercentage = (this.thisMonthFees / this.totalFees) * 100;\n    \n      console.log(`Fee collection for this month: $${this.thisMonthFees}`);\n      console.log(`Total fee collection: $${this.totalFees}`);\n      console.log(`Fee collection percentage for this month: ${this.feeCollectionPercentage.toFixed(2)}%`);\n    });\n    \n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}