{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:9000/api'; // Replace with your server API URL\n  }\n  // Create a new user\n  createUser(user) {\n    return this.http.post(`${this.apiUrl}/users`, user);\n  }\n  getAll() {\n    return this.http.get(this.apiUrl + '/users').pipe();\n  }\n  getonestudent(id) {\n    return this.http.get(\"http://localhost:9000/api/users/\" + id).pipe(tap(student => console.log(\"student\", student)), catchError(this.handleError));\n  }\n  updateUser(userId, updatedUserData) {\n    // Make an HTTP PUT or PATCH request to update the user by ID\n    return this.http.put(`${this.apiUrl}/users/${userId}`, updatedUserData).pipe();\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["UserService","constructor","http","apiUrl","createUser","user","post","getAll","get","pipe","getonestudent","id","tap","student","console","log","catchError","handleError","updateUser","userId","updatedUserData","put","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IUser } from 'src/models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private apiUrl = 'http://localhost:9000/api'; // Replace with your server API URL\n\n  constructor(private http: HttpClient) {}\n\n  // Create a new user\n  createUser(user: IUser): Observable<IUser> {\n    return this.http.post<IUser>(`${this.apiUrl}/users`, user);\n  }\n  public getAll():Observable<any>\n  {\n    \n    return this.http.get(this.apiUrl+'/users').pipe(\n      \n    )\n  };\n\n  public getonestudent(id:any):Observable<any>\n  {\n    return this.http.get(\"http://localhost:9000/api/users/\"+id).pipe(\n        tap(student=>console.log(\"student\",student)),\n        catchError(this.handleError)\n    );\n  }\n\n  updateUser(userId: string, updatedUserData: any): Observable<any> {\n    // Make an HTTP PUT or PATCH request to update the user by ID\n    return this.http.put(`${this.apiUrl}/users/${userId}`, updatedUserData).pipe(\n      \n    );\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,2BAA2B,CAAC,CAAC;EAEP;EAEvC;EACAC,UAAUA,CAACC,IAAW;IACpB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAQ,GAAG,IAAI,CAACH,MAAM,QAAQ,EAAEE,IAAI,CAAC;EAC5D;EACOE,MAAMA,CAAA;IAGX,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAC,IAAI,CAACL,MAAM,GAAC,QAAQ,CAAC,CAACM,IAAI,EAE9C;EACH;EAEOC,aAAaA,CAACC,EAAM;IAEzB,OAAO,IAAI,CAACT,IAAI,CAACM,GAAG,CAAC,kCAAkC,GAACG,EAAE,CAAC,CAACF,IAAI,CAC5DG,GAAG,CAACC,OAAO,IAAEC,OAAO,CAACC,GAAG,CAAC,SAAS,EAACF,OAAO,CAAC,CAAC,EAC5CG,UAAU,CAAC,IAAI,CAACC,WAAW,CAAC,CAC/B;EACH;EAEAC,UAAUA,CAACC,MAAc,EAAEC,eAAoB;IAC7C;IACA,OAAO,IAAI,CAAClB,IAAI,CAACmB,GAAG,CAAC,GAAG,IAAI,CAAClB,MAAM,UAAUgB,MAAM,EAAE,EAAEC,eAAe,CAAC,CAACX,IAAI,EAE3E;EACH;EAAC,QAAAa,CAAA,G;qBA/BUtB,WAAW,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX3B,WAAW;IAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}