{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nexport let AdmissionComponent = class AdmissionComponent {\n  constructor(userService, formBuilder, Cla) {\n    this.userService = userService;\n    this.formBuilder = formBuilder;\n    this.Cla = Cla;\n    this.users = [];\n    this.userForm = new FormGroup({});\n    this.Classes = [];\n    this.userForm = this.formBuilder.group({\n      name: ['', Validators.required],\n      register: ['', Validators.required],\n      genre: ['', Validators.required],\n      dateN: ['', Validators.required],\n      adresse: ['', Validators.required],\n      role: ['', Validators.required],\n      father: ['', Validators.required],\n      profession: ['', Validators.required],\n      nationalId: ['', Validators.required],\n      educat: ['', Validators.required],\n      mobile: ['', Validators.required],\n      email: ['', Validators.required]\n      //salaire: ['', Validators.required],\n    });\n  }\n\n  ngOnInit() {\n    this.Cla.getClasse().subscribe(classe => {\n      this.Classes = classe;\n      console.log(this.Classes);\n    });\n  }\n  addUser() {\n    if (this.userForm.valid) {\n      const newUser = this.userForm.value; // Get the form data\n      // Call the createUser method from your user service\n      this.userService.createUser(newUser).subscribe(user => {\n        console.log('User added:', user);\n        // Optionally, reset the form\n        this.userForm.reset();\n      });\n    }\n  }\n};\nAdmissionComponent = __decorate([Component({\n  selector: 'app-admission',\n  templateUrl: './admission.component.html',\n  styleUrls: ['./admission.component.css']\n})], AdmissionComponent);","map":{"version":3,"names":["Component","FormGroup","Validators","AdmissionComponent","constructor","userService","formBuilder","Cla","users","userForm","Classes","group","name","required","register","genre","dateN","adresse","role","father","profession","nationalId","educat","mobile","email","ngOnInit","getClasse","subscribe","classe","console","log","addUser","valid","newUser","value","createUser","user","reset","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\admission\\admission.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../user.service';\nimport { IUser } from 'src/models';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ClasseroomService } from '../classeroom.service';\n@Component({\n  selector: 'app-admission',\n  templateUrl: './admission.component.html',\n  styleUrls: ['./admission.component.css']\n})\nexport class AdmissionComponent implements OnInit {\n  users: IUser[]=[];\n  userForm: FormGroup= new FormGroup({});\n  Classes: any[] = [];\n  constructor(private userService: UserService,\n    private formBuilder: FormBuilder,\n    private Cla:ClasseroomService) {\n    this.userForm = this.formBuilder.group({\nname: ['', Validators.required],\nregister: ['', Validators.required],\ngenre: ['', Validators.required],\ndateN: ['', Validators.required],\nadresse: ['', Validators.required],\nrole: ['', Validators.required],\nfather: ['', Validators.required],\nprofession: ['', Validators.required],\nnationalId: ['', Validators.required],\neducat: ['', Validators.required],\nmobile: ['', Validators.required],\nemail: ['', Validators.required],\n//salaire: ['', Validators.required],\n      \n    });\n  }\n  ngOnInit(): void {\n    this.Cla.getClasse()\n    .subscribe(classe =>{\n      this.Classes = classe\n      console.log(this.Classes);\n      \n    });\n  }\n  addUser() {\n    if (this.userForm.valid) {\n      const newUser = this.userForm.value; // Get the form data\n\n      // Call the createUser method from your user service\n      this.userService.createUser(newUser).subscribe((user) => {\n        console.log('User added:', user);\n        // Optionally, reset the form\n        this.userForm.reset();\n      });\n    }\n  }\n \n  \n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAGjD,SAAsBC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAO5D,WAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAI7BC,YAAoBC,WAAwB,EAClCC,WAAwB,EACxBC,GAAqB;IAFX,KAAAF,WAAW,GAAXA,WAAW;IACrB,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,GAAG,GAAHA,GAAG;IALb,KAAAC,KAAK,GAAU,EAAE;IACjB,KAAAC,QAAQ,GAAa,IAAIR,SAAS,CAAC,EAAE,CAAC;IACtC,KAAAS,OAAO,GAAU,EAAE;IAIjB,IAAI,CAACD,QAAQ,GAAG,IAAI,CAACH,WAAW,CAACK,KAAK,CAAC;MAC3CC,IAAI,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MAC/BC,QAAQ,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACW,QAAQ,CAAC;MACnCE,KAAK,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACW,QAAQ,CAAC;MAChCG,KAAK,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACW,QAAQ,CAAC;MAChCI,OAAO,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACW,QAAQ,CAAC;MAClCK,IAAI,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACW,QAAQ,CAAC;MAC/BM,MAAM,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACW,QAAQ,CAAC;MACjCO,UAAU,EAAE,CAAC,EAAE,EAAElB,UAAU,CAACW,QAAQ,CAAC;MACrCQ,UAAU,EAAE,CAAC,EAAE,EAAEnB,UAAU,CAACW,QAAQ,CAAC;MACrCS,MAAM,EAAE,CAAC,EAAE,EAAEpB,UAAU,CAACW,QAAQ,CAAC;MACjCU,MAAM,EAAE,CAAC,EAAE,EAAErB,UAAU,CAACW,QAAQ,CAAC;MACjCW,KAAK,EAAE,CAAC,EAAE,EAAEtB,UAAU,CAACW,QAAQ;MAC/B;KAEK,CAAC;EACJ;;EACAY,QAAQA,CAAA;IACN,IAAI,CAAClB,GAAG,CAACmB,SAAS,EAAE,CACnBC,SAAS,CAACC,MAAM,IAAG;MAClB,IAAI,CAAClB,OAAO,GAAGkB,MAAM;MACrBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACpB,OAAO,CAAC;IAE3B,CAAC,CAAC;EACJ;EACAqB,OAAOA,CAAA;IACL,IAAI,IAAI,CAACtB,QAAQ,CAACuB,KAAK,EAAE;MACvB,MAAMC,OAAO,GAAG,IAAI,CAACxB,QAAQ,CAACyB,KAAK,CAAC,CAAC;MAErC;MACA,IAAI,CAAC7B,WAAW,CAAC8B,UAAU,CAACF,OAAO,CAAC,CAACN,SAAS,CAAES,IAAI,IAAI;QACtDP,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEM,IAAI,CAAC;QAChC;QACA,IAAI,CAAC3B,QAAQ,CAAC4B,KAAK,EAAE;MACvB,CAAC,CAAC;;EAEN;CAGD;AA9CYlC,kBAAkB,GAAAmC,UAAA,EAL9BtC,SAAS,CAAC;EACTuC,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACWtC,kBAAkB,CA8C9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}