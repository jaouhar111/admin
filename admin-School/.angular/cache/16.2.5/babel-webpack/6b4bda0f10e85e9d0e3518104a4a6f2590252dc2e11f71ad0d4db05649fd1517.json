{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../classeroom.service\";\nexport class LineChartsComponent {\n  constructor(Cla) {\n    this.Cla = Cla;\n    this.classData = []; // Array to store class data\n    this.classNames = []; // Array to store class names\n    this.studentCounts = []; // Array to store student counts\n  }\n\n  ngOnInit() {\n    this.Cla.getClasse().subscribe(data => {\n      this.classData = data;\n      // Extract class names and student counts\n      this.classNames = this.classData.map(classInfo => classInfo.name);\n      this.studentCounts = this.classData.map(classInfo => classInfo.students.length);\n      // Create and update the chart\n      this.renderChart();\n    });\n  }\n  renderChart() {\n    const mychart = new Chart(\"barchart\", {\n      type: 'bar',\n      options: {\n        indexAxis: 'y'\n      },\n      data: {\n        labels: this.classNames,\n        datasets: [{\n          label: 'Etudients',\n          data: this.studentCounts,\n          backgroundColor: ['rgba(255, 99, 132, 0.2)'],\n          borderColor: ['rgb(255, 99, 132)'],\n          borderWidth: 1\n        }]\n      }\n    });\n  }\n  static #_ = this.ɵfac = function LineChartsComponent_Factory(t) {\n    return new (t || LineChartsComponent)(i0.ɵɵdirectiveInject(i1.ClasseroomService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LineChartsComponent,\n    selectors: [[\"app-line-charts\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"barchart\", 1, \"relative\", \"h-[20vh]\", \"w-[45vw]\"]],\n    template: function LineChartsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", 0);\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["LineChartsComponent","constructor","Cla","classData","classNames","studentCounts","ngOnInit","getClasse","subscribe","data","map","classInfo","name","students","length","renderChart","mychart","Chart","type","options","indexAxis","labels","datasets","label","backgroundColor","borderColor","borderWidth","_","i0","ɵɵdirectiveInject","i1","ClasseroomService","_2","selectors","decls","vars","consts","template","LineChartsComponent_Template","rf","ctx","ɵɵelement"],"sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\line-charts\\line-charts.component.ts","C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\line-charts\\line-charts.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ClasseroomService } from '../classeroom.service';\n\n@Component({\n  selector: 'app-line-charts',\n  templateUrl: './line-charts.component.html',\n  styleUrls: ['./line-charts.component.css']\n})\nexport class LineChartsComponent {\n  classData: any[] = []; // Array to store class data\n  classNames: string[] = []; // Array to store class names\n  studentCounts: number[] = []; // Array to store student counts\n  constructor(private Cla:ClasseroomService){}\n  ngOnInit(): void {\n    this.Cla.getClasse()\n    .subscribe(data => {\n      this.classData = data;\n\n      // Extract class names and student counts\n      this.classNames = this.classData.map(classInfo => classInfo.name);\n      this.studentCounts = this.classData.map(classInfo => classInfo.students.length);\n\n      // Create and update the chart\n      this.renderChart();\n    });\n  }\n  renderChart(){\n    const mychart = new Chart(\"barchart\",{\n    type:'bar',\n    options: {\n      indexAxis: 'y',\n    },\n     data : {\n      labels: this.classNames,\n      datasets: [{\n        label: 'Etudients',\n        data: this.studentCounts,\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          \n        ],\n        borderColor: [\n          'rgb(255, 99, 132)',\n          \n        ],\n        borderWidth: 1\n      }]\n    }\n    })\n    \n    }\n}\n","<canvas id=\"barchart\" class=\"relative h-[20vh] w-[45vw]\"></canvas>\n"],"mappings":";;AAQA,OAAM,MAAOA,mBAAmB;EAI9BC,YAAoBC,GAAqB;IAArB,KAAAA,GAAG,GAAHA,GAAG;IAHvB,KAAAC,SAAS,GAAU,EAAE,CAAC,CAAC;IACvB,KAAAC,UAAU,GAAa,EAAE,CAAC,CAAC;IAC3B,KAAAC,aAAa,GAAa,EAAE,CAAC,CAAC;EACa;;EAC3CC,QAAQA,CAAA;IACN,IAAI,CAACJ,GAAG,CAACK,SAAS,EAAE,CACnBC,SAAS,CAACC,IAAI,IAAG;MAChB,IAAI,CAACN,SAAS,GAAGM,IAAI;MAErB;MACA,IAAI,CAACL,UAAU,GAAG,IAAI,CAACD,SAAS,CAACO,GAAG,CAACC,SAAS,IAAIA,SAAS,CAACC,IAAI,CAAC;MACjE,IAAI,CAACP,aAAa,GAAG,IAAI,CAACF,SAAS,CAACO,GAAG,CAACC,SAAS,IAAIA,SAAS,CAACE,QAAQ,CAACC,MAAM,CAAC;MAE/E;MACA,IAAI,CAACC,WAAW,EAAE;IACpB,CAAC,CAAC;EACJ;EACAA,WAAWA,CAAA;IACT,MAAMC,OAAO,GAAG,IAAIC,KAAK,CAAC,UAAU,EAAC;MACrCC,IAAI,EAAC,KAAK;MACVC,OAAO,EAAE;QACPC,SAAS,EAAE;OACZ;MACAX,IAAI,EAAG;QACNY,MAAM,EAAE,IAAI,CAACjB,UAAU;QACvBkB,QAAQ,EAAE,CAAC;UACTC,KAAK,EAAE,WAAW;UAClBd,IAAI,EAAE,IAAI,CAACJ,aAAa;UACxBmB,eAAe,EAAE,CACf,yBAAyB,CAE1B;UACDC,WAAW,EAAE,CACX,mBAAmB,CAEpB;UACDC,WAAW,EAAE;SACd;;KAEF,CAAC;EAEF;EAAC,QAAAC,CAAA,G;qBA1CQ3B,mBAAmB,EAAA4B,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,iBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAnBhC,mBAAmB;IAAAiC,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCRhCX,EAAA,CAAAa,SAAA,gBAAkE"},"metadata":{},"sourceType":"module","externalDependencies":[]}