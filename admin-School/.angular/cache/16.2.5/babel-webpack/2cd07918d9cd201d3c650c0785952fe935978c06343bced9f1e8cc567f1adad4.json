{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ProfileComponent = class ProfileComponent {\n  constructor(route, user, payment, attendanceService) {\n    this.route = route;\n    this.user = user;\n    this.payment = payment;\n    this.attendanceService = attendanceService;\n    this.attonePresent = [];\n    this.attoneAbsent = [];\n    this.attendancePercentageAllMonths = 0;\n    this.attendancePercentageCurrentMonth = 0;\n    this.data = [];\n    this.attone = [];\n    this.id = '';\n    this.dataType = '';\n    this.payments = [];\n  }\n  ngOnInit() {\n    this.percentageattendance();\n    // const id=this.route.snapshot.paramMap.get(\"id\");\n    this.route.params.subscribe(params => {\n      this.dataType = params['type'];\n      this.id = params['id']; // Will be 'student' or 'employee'\n    });\n\n    this.user.getonestudent(this.id).subscribe({\n      next: student => {\n        this.data = student;\n      }\n    });\n    if (this.data === 'employee') {\n      this.payment.getAllPayments().subscribe(payment => {\n        // Filter users by role 'student'\n        this.payments = payment.filter(payment => payment.paymentType === 'regularPayment').filter(payment => payment.userId === this.id);\n        console.log(this.payments);\n      });\n    } else {\n      this.payment.getAllPayments().subscribe(payment => {\n        // Filter users by role 'student'\n        this.payments = payment.filter(payment => payment.paymentType !== 'collectionFee').filter(payment => payment.userId === this.id);\n        console.log(this.payments);\n      });\n    }\n  }\n  percentageattendance() {\n    // Fetch all attendance records\n    this.attendanceService.getAllAttendance().subscribe(att => {\n      // Handle the fetched attendance records here\n      this.attone = att.filter(att => att.iduser._id === this.id);\n      // Filter records for the current month\n      const currentDate = new Date();\n      const currentMonth = currentDate.getMonth();\n      const currentYear = currentDate.getFullYear();\n      this.attonePresent = this.attone.filter(atte => {\n        const attDate = new Date(atte.datenow); // Use 'datenow' property for date filtering\n        return attDate.getMonth() === currentMonth && attDate.getFullYear() === currentYear && atte.status === 'present';\n      });\n      this.attoneAbsent = this.attone.filter(atte => {\n        const attDate = new Date(atte.datenow); // Use 'datenow' property for date filtering\n        return attDate.getMonth() === currentMonth && attDate.getFullYear() === currentYear && atte.status === 'absent';\n      });\n      // Calculate attendance percentages\n      const totalRecordsAllMonths = this.attone.length;\n      const totalRecordsCurrentMonth = this.attonePresent.length + this.attoneAbsent.length;\n      if (totalRecordsAllMonths > 0) {\n        this.attendancePercentageAllMonths = this.attonePresent.length / totalRecordsAllMonths * 100;\n      }\n      if (totalRecordsCurrentMonth > 0) {\n        this.attendancePercentageCurrentMonth = this.attonePresent.length / totalRecordsCurrentMonth * 100;\n      }\n      console.log('Attendance Records for All Months:', this.attone);\n      console.log('Attendance Records for Current Month (Present):', this.attonePresent);\n      console.log('Attendance Records for Current Month (Absent):', this.attoneAbsent);\n      console.log('Attendance Percentage for All Months:', this.attendancePercentageAllMonths);\n      console.log('Attendance Percentage for Current Month:', this.attendancePercentageCurrentMonth);\n    }, error => {\n      console.error('Error fetching attendance records:', error);\n    });\n  }\n};\nProfileComponent = __decorate([Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})], ProfileComponent);","map":{"version":3,"names":["Component","ProfileComponent","constructor","route","user","payment","attendanceService","attonePresent","attoneAbsent","attendancePercentageAllMonths","attendancePercentageCurrentMonth","data","attone","id","dataType","payments","ngOnInit","percentageattendance","params","subscribe","getonestudent","next","student","getAllPayments","filter","paymentType","userId","console","log","getAllAttendance","att","iduser","_id","currentDate","Date","currentMonth","getMonth","currentYear","getFullYear","atte","attDate","datenow","status","totalRecordsAllMonths","length","totalRecordsCurrentMonth","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\admin-School\\src\\app\\profile\\profile.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IAttendance, Ipayment } from 'src/models';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit{\n  attonePresent: IAttendance[] = [];\n  attoneAbsent: IAttendance[] = [];\n  attendancePercentageAllMonths: number = 0;\n  attendancePercentageCurrentMonth: number = 0;\n  data: any = [];\n  attone: IAttendance[] = [];\n  id='';\n  dataType: String='';\n  payments:Ipayment[]=[];\n  constructor(private route:ActivatedRoute,private user:UserService,private payment:PaymentService,private attendanceService: AttendanceService){}\n  ngOnInit(): void {\n    this.percentageattendance();\n   // const id=this.route.snapshot.paramMap.get(\"id\");\n    this.route.params.subscribe(params => {\n      this.dataType = params['type'];\n      this.id=params['id'] // Will be 'student' or 'employee'\n    });\n  \n    this.user.getonestudent(this.id).subscribe({\n      next:student => { this.data = student }\n     })\n     if (this.data==='employee') {\n      this.payment.getAllPayments().subscribe((payment: Ipayment[]) => {\n        // Filter users by role 'student'\n        this.payments = payment.filter(payment => payment.paymentType === 'regularPayment')\n        .filter(payment => payment.userId ===this.id);\n        console.log(this.payments);\n        \n      });\n     } else {\n      this.payment.getAllPayments().subscribe((payment: Ipayment[]) => {\n        // Filter users by role 'student'\n        this.payments = payment.filter(payment => payment.paymentType !== 'collectionFee')\n        .filter(payment => payment.userId ===this.id);\n        console.log(this.payments);\n      });\n     }\n  }\n\n  percentageattendance(){\n     // Fetch all attendance records\n    this.attendanceService.getAllAttendance().subscribe(\n      (att: IAttendance[]) => {\n        // Handle the fetched attendance records here\n        this.attone = att.filter(att => att.iduser._id === this.id);\n\n        // Filter records for the current month\n        const currentDate = new Date();\n        const currentMonth = currentDate.getMonth();\n        const currentYear = currentDate.getFullYear();\n        this.attonePresent = this.attone.filter(atte => {\n          const attDate = new Date(atte.datenow); // Use 'datenow' property for date filtering\n          return attDate.getMonth() === currentMonth && attDate.getFullYear() === currentYear && atte.status === 'present';\n        });\n\n        this.attoneAbsent = this.attone.filter(atte => {\n          const attDate = new Date(atte.datenow); // Use 'datenow' property for date filtering\n          return attDate.getMonth() === currentMonth && attDate.getFullYear() === currentYear && atte.status === 'absent';\n        });\n\n        // Calculate attendance percentages\n        const totalRecordsAllMonths = this.attone.length;\n        const totalRecordsCurrentMonth = this.attonePresent.length + this.attoneAbsent.length;\n\n        if (totalRecordsAllMonths > 0) {\n          this.attendancePercentageAllMonths = (this.attonePresent.length / totalRecordsAllMonths) * 100;\n        }\n\n        if (totalRecordsCurrentMonth > 0) {\n          this.attendancePercentageCurrentMonth = (this.attonePresent.length / totalRecordsCurrentMonth) * 100;\n        }\n\n        console.log('Attendance Records for All Months:', this.attone);\n        console.log('Attendance Records for Current Month (Present):', this.attonePresent);\n        console.log('Attendance Records for Current Month (Absent):', this.attoneAbsent);\n        console.log('Attendance Percentage for All Months:', this.attendancePercentageAllMonths);\n        console.log('Attendance Percentage for Current Month:', this.attendancePercentageCurrentMonth);\n      },\n      (error) => {\n        console.error('Error fetching attendance records:', error);\n      }\n    );\n    \n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}