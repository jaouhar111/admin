{"ast":null,"code":"var _class;\nimport { throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserServiceService {\n  constructor(http) {\n    this.http = http;\n    this.url = \"http://localhost:9000/api/users\";\n    this.name = '';\n    this.register = '';\n    this.genre = '';\n    this.photo = '';\n    this.dateN = new Date();\n    this.adresse = '';\n    this.role = 'Student';\n    this.father = '';\n    this.profession = '';\n    this.nationalid = '';\n    this.education = '';\n    this.mobile = '';\n    this.email = '';\n  }\n  getStudent() {\n    return this.http.get(this.url).pipe(tap(users => console.log(\"users\", users)), catchError(this.handleError));\n  }\n  ajStudent(user) {\n    return this.http.post(this.url, user).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\n_class = UserServiceService;\n_class.ɵfac = function UserServiceService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAGA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,kBAAkB;EAe7BC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IAdP,QAAG,GAAC,iCAAiC;IACtD,SAAI,GAAW,EAAE;IACjB,aAAQ,GAAS,EAAE;IACnB,UAAK,GAAU,EAAE;IACjB,UAAK,GAAS,EAAE;IAChB,UAAK,GAAQ,IAAIC,IAAI,EAAE;IACvB,YAAO,GAAS,EAAE;IAClB,SAAI,GAAS,SAAS;IACtB,WAAM,GAAS,EAAE;IACjB,eAAU,GAAS,EAAE;IACrB,eAAU,GAAS,EAAE;IACrB,cAAS,GAAS,EAAE;IACpB,WAAM,GAAS,EAAE;IACjB,UAAK,GAAS,EAAE;EACuB;EAEhCC,UAAU;IAEf,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAU,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,CACxCT,GAAG,CAACU,KAAK,IAAEC,OAAO,CAACC,GAAG,CAAC,OAAO,EAACF,KAAK,CAAC,CAAC,EACtCT,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC/B;EACH;EAEOC,SAAS,CAACC,IAAQ;IACvB,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAC,IAAI,CAACR,GAAG,EAACO,IAAI,CAAC,CAACN,IAAI,CACvCR,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC7B;EACH;EAEQA,WAAW,CAACI,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtB;MACAP,OAAO,CAACM,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACL;MACA;MACAN,OAAO,CAACM,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EAAED,KAAK,CAACA,KAAK,CAAC;;IAErE;IACA,OAAOlB,UAAU,CAAC,MAAM,IAAIoB,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;;SA3CWjB,kBAAkB;;mBAAlBA,MAAkB;AAAA;;SAAlBA,MAAkB;EAAAkB,SAAlBlB,MAAkB;EAAAmB,YAFjB;AAAM","names":["throwError","tap","catchError","UserServiceService","constructor","http","Date","getStudent","get","url","pipe","users","console","log","handleError","ajStudent","user","post","error","status","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\my-dashboard\\src\\app\\user-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { IUser } from './pages/user';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserServiceService {\n  private readonly url=\"http://localhost:9000/api/users\";\n  name: string = '';\n  register:String ='';\n  genre :String ='';\n  photo:String ='';\n  dateN: Date= new Date();\n  adresse:String ='';\n  role:String ='Student';\n  father:String ='';\n  profession:String ='';\n  nationalid:String ='';\n  education:String ='';\n  mobile:String ='';\n  email:String ='';\n  constructor(private http:HttpClient) { }\n\n  public getStudent():Observable<IUser[]>\n  {\n    return this.http.get<IUser[]>(this.url).pipe(\n        tap(users=>console.log(\"users\",users)),\n        catchError(this.handleError)\n    );\n  }\n\n  public ajStudent(user:any):Observable<any>{\n    return this.http.post(this.url,user).pipe(\n      catchError(this.handleError)\n    )\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}