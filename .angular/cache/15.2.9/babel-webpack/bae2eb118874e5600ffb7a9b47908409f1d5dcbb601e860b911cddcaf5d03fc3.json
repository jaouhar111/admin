{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet StudentsComponent = class StudentsComponent {\n  constructor(userService, router, load) {\n    this.userService = userService;\n    this.router = router;\n    this.load = load;\n    this.receivedId = '';\n    this.students = [];\n    this.filteredList = [...this.students];\n    this.stu = \"\";\n  }\n  filterByName() {\n    if (this.stu !== undefined) {\n      this.filteredList = this.students.filter(item => item.name >= this.stu);\n    } else {\n      this.filteredList = [...this.students]; // Réinitialisez la liste si le critère est vide\n    }\n  }\n\n  ngOnInit() {\n    this.userService.getStudent().subscribe(data => {\n      // Filter users by role 'student'\n      this.students = data.filter(user => user.role === 'Student');\n      console.log(this.students);\n      this.filteredList = [...this.students];\n    });\n  }\n  ngOnDestroy() {\n    throw new Error('Method not implemented.');\n  }\n  onItemClick(itemId) {\n    this.receivedId = itemId;\n  }\n  deleteUser(userId) {\n    this.userService.deleteUser(userId).subscribe(() => {\n      console.log('User deleted successfully.');\n      // Perform any other actions after successful deletion.\n    }, error => {\n      console.error('Error deleting user:', error);\n      // Handle error gracefully.\n    });\n\n    const studentIndex = this.students.findIndex(user => user._id === userId);\n    // Find the index of the user to delete in the filteredList array\n    const filteredIndex = this.filteredList.findIndex(user => user._id === userId);\n    // If the user is found in both arrays, remove them\n    if (studentIndex !== -1 && filteredIndex !== -1) {\n      this.students.splice(studentIndex, 1);\n      this.filteredList.splice(filteredIndex, 1);\n    }\n  }\n};\nStudentsComponent = __decorate([Component({\n  selector: 'app-students',\n  templateUrl: './students.component.html',\n  styleUrls: ['./students.component.css']\n})], StudentsComponent);\nexport { StudentsComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAA0B,eAAe;AAUpD,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAK9BC,YAAoBC,WAA8B,EAASC,MAAa,EAASC,IAAS;IAAtE,gBAAW,GAAXF,WAAW;IAA4B,WAAM,GAANC,MAAM;IAAgB,SAAI,GAAJC,IAAI;IAJnF,eAAU,GAAS,EAAE;IACrB,aAAQ,GAAY,EAAE;IACtB,iBAAY,GAAY,CAAC,GAAG,IAAI,CAACC,QAAQ,CAAC;IAC1C,QAAG,GAAS,EAAE;EAC6E;EAE7FC,YAAY;IACV,IAAI,IAAI,CAACC,GAAG,KAAKC,SAAS,EAAE;MAC1B,IAAI,CAACC,YAAY,GAAG,IAAI,CAACJ,QAAQ,CAACK,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,IAAI,IAAI,CAACL,GAAG,CAAC;KACxE,MAAM;MACL,IAAI,CAACE,YAAY,GAAG,CAAC,GAAG,IAAI,CAACJ,QAAQ,CAAC,CAAC,CAAC;;EAE5C;;EACAQ,QAAQ;IAEN,IAAI,CAACX,WAAW,CAACY,UAAU,EAAE,CAC5BC,SAAS,CAAEC,IAAa,IAAI;MAC3B;MACA,IAAI,CAACX,QAAQ,GAAGW,IAAI,CAACN,MAAM,CAACO,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAK,SAAS,CAAC;MAC5DC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACf,QAAQ,CAAC;MAC1B,IAAI,CAACI,YAAY,GAAC,CAAC,GAAG,IAAI,CAACJ,QAAQ,CAAC;IACtC,CAAC,CAAC;EACJ;EACAgB,WAAW;IACT,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAGAC,WAAW,CAACC,MAAc;IACxB,IAAI,CAACC,UAAU,GAAGD,MAAM;EAC1B;EACAE,UAAU,CAACC,MAAc;IACvB,IAAI,CAACzB,WAAW,CAACwB,UAAU,CAACC,MAAM,CAAC,CAChCZ,SAAS,CACR,MAAK;MACHI,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC;IAEF,CAAC,EACAQ,KAAK,IAAI;MACRT,OAAO,CAACS,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C;IACF,CAAC,CACF;;IACD,MAAMC,YAAY,GAAG,IAAI,CAACxB,QAAQ,CAACyB,SAAS,CAAEb,IAAI,IAAKA,IAAI,CAACc,GAAG,KAAKJ,MAAM,CAAC;IAE7E;IACA,MAAMK,aAAa,GAAG,IAAI,CAACvB,YAAY,CAACqB,SAAS,CAAEb,IAAI,IAAKA,IAAI,CAACc,GAAG,KAAKJ,MAAM,CAAC;IAEhF;IACA,IAAIE,YAAY,KAAK,CAAC,CAAC,IAAIG,aAAa,KAAK,CAAC,CAAC,EAAE;MAC/C,IAAI,CAAC3B,QAAQ,CAAC4B,MAAM,CAACJ,YAAY,EAAE,CAAC,CAAC;MACrC,IAAI,CAACpB,YAAY,CAACwB,MAAM,CAACD,aAAa,EAAE,CAAC,CAAC;;EAG9C;CAEC;AA1DYhC,iBAAiB,eAL7BD,SAAS,CAAC;EACTmC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACWpC,iBAAiB,CA0D7B;SA1DYA,iBAAiB","names":["Component","StudentsComponent","constructor","userService","router","load","students","filterByName","stu","undefined","filteredList","filter","item","name","ngOnInit","getStudent","subscribe","data","user","role","console","log","ngOnDestroy","Error","onItemClick","itemId","receivedId","deleteUser","userId","error","studentIndex","findIndex","_id","filteredIndex","splice","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\my-dashboard\\src\\app\\pages\\students\\students.component.ts"],"sourcesContent":["import { Component, OnInit,OnDestroy } from '@angular/core';\nimport { UserServiceService } from 'src/app/user-service.service';\nimport { IUser } from '../user';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-students',\n  templateUrl: './students.component.html',\n  styleUrls: ['./students.component.css']\n})\nexport class StudentsComponent implements OnInit,OnDestroy{\n  receivedId: String='';\n  students: IUser[] = [];\n  filteredList: IUser[] = [...this.students]; \n  stu:String =\"\"\nconstructor(private userService:UserServiceService,private router:Router,private load:load) {}\n  \nfilterByName(): void {\n  if (this.stu !== undefined) {\n    this.filteredList = this.students.filter(item => item.name >= this.stu);\n  } else {\n    this.filteredList = [...this.students]; // Réinitialisez la liste si le critère est vide\n  }\n}\nngOnInit(): void {\n\n  this.userService.getStudent()\n  .subscribe((data: IUser[]) => {\n    // Filter users by role 'student'\n    this.students = data.filter(user => user.role === 'Student');\n    console.log(this.students);\n    this.filteredList=[...this.students]\n  });\n}\nngOnDestroy(): void {\n  throw new Error('Method not implemented.');\n}\n\n\nonItemClick(itemId: String) {\n  this.receivedId = itemId;\n}\ndeleteUser(userId: String): void {\n  this.userService.deleteUser(userId)\n    .subscribe(\n      () => {\n        console.log('User deleted successfully.');\n        // Perform any other actions after successful deletion.\n        \n      },\n      (error) => {\n        console.error('Error deleting user:', error);\n        // Handle error gracefully.\n      }\n    );\n    const studentIndex = this.students.findIndex((user) => user._id === userId);\n\n  // Find the index of the user to delete in the filteredList array\n  const filteredIndex = this.filteredList.findIndex((user) => user._id === userId);\n\n  // If the user is found in both arrays, remove them\n  if (studentIndex !== -1 && filteredIndex !== -1) {\n    this.students.splice(studentIndex, 1);\n    this.filteredList.splice(filteredIndex, 1);\n    \n}\n}\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}