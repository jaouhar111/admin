{"ast":null,"code":"var _class;\nimport { throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ClasseService {\n  constructor(http) {\n    this.http = http;\n    this.url = \"http://localhost:9000/api/classes\";\n  }\n  getClasse() {\n    return this.http.get(this.url).pipe(tap(classe => console.log(\"classe\", classe)), catchError(this.handleError));\n  }\n  ajClasse(name, prof) {\n    return this.http.post(this.url, {\n      name,\n      prof\n    }).pipe(catchError(this.handleError));\n  }\n  updateClasseroom(classroomId, students) {\n    const requestBody = {\n      students\n    };\n    // Make a PUT request to the updated classroom update API endpoint\n    return this.http.put(\"http://localhost:9000/api/classes/\" + classroomId, requestBody);\n  }\n  updateClassroomAndAddMatiere(classroomId, matiereId) {\n    const url = \"http://localhost:9000/api/classes/\" + classroomId;\n    const requestBody = {\n      matiereId\n    };\n    return this.http.patch(url, requestBody);\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\n_class = ClasseService;\n_class.ɵfac = function ClasseService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;AAMhD,OAAM,MAAOC,aAAa;EAExBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IADP,QAAG,GAAC,mCAAmC;EACjB;EAEhCC,SAAS;IAEd,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,CAC/BR,GAAG,CAACS,MAAM,IAAEC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAACF,MAAM,CAAC,CAAC,EACzCR,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAC/B;EACH;EAEOC,QAAQ,CAACC,IAAY,EAAEC,IAAW;IACvC,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAC,IAAI,CAACT,GAAG,EAAC;MAC7BO,IAAI;MAACC;KACN,CAAC,CAACP,IAAI,CACLP,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAC7B;EACH;EAEAK,gBAAgB,CAACC,WAAmB,EAAEC,QAAgB;IACpD,MAAMC,WAAW,GAAG;MAAED;IAAQ,CAAE;IAEhC;IACA,OAAO,IAAI,CAACf,IAAI,CAACiB,GAAG,CAAC,oCAAoC,GAACH,WAAW,EAAEE,WAAW,CAAC;EAErF;EACAE,4BAA4B,CAACJ,WAAmB,EAAEK,SAAiB;IACjE,MAAMhB,GAAG,GAAG,oCAAoC,GAACW,WAAW;IAC5D,MAAME,WAAW,GAAG;MAAEG;IAAS,CAAE;IACjC,OAAO,IAAI,CAACnB,IAAI,CAACoB,KAAK,CAACjB,GAAG,EAAEa,WAAW,CAAC;EAC1C;EAEQR,WAAW,CAACa,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtB;MACAhB,OAAO,CAACe,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACL;MACA;MACAf,OAAO,CAACe,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EAAED,KAAK,CAACA,KAAK,CAAC;;IAErE;IACA,OAAO1B,UAAU,CAAC,MAAM,IAAI4B,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;;SA7CWzB,aAAa;;mBAAbA,MAAa;AAAA;;SAAbA,MAAa;EAAA0B,SAAb1B,MAAa;EAAA2B,YAFZ;AAAM","names":["throwError","tap","catchError","ClasseService","constructor","http","getClasse","get","url","pipe","classe","console","log","handleError","ajClasse","name","prof","post","updateClasseroom","classroomId","students","requestBody","put","updateClassroomAndAddMatiere","matiereId","patch","error","status","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\my-dashboard\\src\\app\\classe.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClasseService {\n  private readonly url=\"http://localhost:9000/api/classes\";\n  constructor(private http:HttpClient) { }\n\n  public getClasse():Observable<any>\n  {\n    return this.http.get(this.url).pipe(\n        tap(classe=>console.log(\"classe\",classe)),\n        catchError(this.handleError)\n    );\n  }\n\n  public ajClasse(name: String, prof:String):Observable<any>{\n    return this.http.post(this.url,{\n      name,prof\n    }).pipe(\n      catchError(this.handleError)\n    )\n  }\n\n  updateClasseroom(classroomId: String, students: String): Observable<any> {\n    const requestBody = { students };\n\n    // Make a PUT request to the updated classroom update API endpoint\n    return this.http.put(\"http://localhost:9000/api/classes/\"+classroomId, requestBody);\n    \n  }\n  updateClassroomAndAddMatiere(classroomId: String, matiereId: string): Observable<any> {\n    const url = \"http://localhost:9000/api/classes/\"+classroomId;\n    const requestBody = { matiereId };\n    return this.http.patch(url, requestBody);\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}