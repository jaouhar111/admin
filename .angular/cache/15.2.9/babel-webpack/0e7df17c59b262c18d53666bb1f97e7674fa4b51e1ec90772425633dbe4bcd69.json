{"ast":null,"code":"var _class;\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoadingService {\n  constructor(http) {\n    this.http = http;\n    this.url = \"http://localhost:9000/api/matiere\";\n  }\n  loadExternalScript() {\n    const script = document.createElement('script');\n    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.1/flowbite.min.js';\n    script.async = true;\n    script.onload = () => {\n      // Script has loaded, you can now use its functionality\n      // Initialize any required functionality from the script\n    };\n    document.head.appendChild(script);\n  }\n  removeExternalScript() {\n    // If needed, remove the script element from the DOM when the component is destroyed\n    const script = document.querySelector('[src=\"https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.1/flowbite.min.js\"]');\n    if (script) {\n      script.remove();\n    }\n  }\n  ajStudent(name, note, genre, photo, dateN, adresse, role, father, profession, nationalid, education, mobile, email) {\n    const studentData = {\n      name,\n      register,\n      genre,\n      photo,\n      dateN,\n      adresse,\n      role,\n      father,\n      profession,\n      nationalid,\n      education,\n      mobile,\n      email\n    };\n    // Return the full HTTP response with the created student data\n    return this.http.post(this.url, studentData, {\n      observe: 'response'\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\n_class = LoadingService;\n_class.ɵfac = function LoadingService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAAUC,UAAU,QAAQ,gBAAgB;;;AAK5C,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IADP,QAAG,GAAC,mCAAmC;EACjB;EAEvCC,kBAAkB;IAChB,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC/CF,MAAM,CAACG,GAAG,GAAG,uEAAuE;IACpFH,MAAM,CAACI,KAAK,GAAG,IAAI;IACnBJ,MAAM,CAACK,MAAM,GAAG,MAAK;MACnB;MACA;IAAA,CACD;IACDJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACP,MAAM,CAAC;EACnC;EACAQ,oBAAoB;IAClB;IACA,MAAMR,MAAM,GAAGC,QAAQ,CAACQ,aAAa,CAAC,+EAA+E,CAAC;IACtH,IAAIT,MAAM,EAAE;MACVA,MAAM,CAACU,MAAM,EAAE;;EAEnB;EACAC,SAAS,CACPC,IAAY,EACZC,IAAY,EACZC,KAAa,EACbC,KAAa,EACbC,KAAW,EACXC,OAAe,EACfC,IAAY,EACZC,MAAc,EACdC,UAAkB,EAClBC,UAAkB,EAClBC,SAAiB,EACjBC,MAAc,EACdC,KAAa;IAEb,MAAMC,WAAW,GAAG;MAClBb,IAAI;MACJc,QAAQ;MACRZ,KAAK;MACLC,KAAK;MACLC,KAAK;MACLC,OAAO;MACPC,IAAI;MACJC,MAAM;MACNC,UAAU;MACVC,UAAU;MACVC,SAAS;MACTC,MAAM;MACNC;KACD;IAED;IACA,OAAO,IAAI,CAAC1B,IAAI,CAAC6B,IAAI,CAAC,IAAI,CAACC,GAAG,EAAEH,WAAW,EAAE;MAAEI,OAAO,EAAE;IAAU,CAAE,CAAC,CAACC,IAAI,CACxEnC,UAAU,CAAC,IAAI,CAACoC,WAAW,CAAC,CAC7B;EACH;EACQA,WAAW,CAACC,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtB;MACAC,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACL;MACA;MACAE,OAAO,CAACF,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EAAED,KAAK,CAACA,KAAK,CAAC;;IAErE;IACA,OAAOtC,UAAU,CAAC,MAAM,IAAIyC,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;;SArEWvC,cAAc;;mBAAdA,MAAc;AAAA;;SAAdA,MAAc;EAAAwC,SAAdxC,MAAc;EAAAyC,YAFb;AAAM","names":["throwError","catchError","LoadingService","constructor","http","loadExternalScript","script","document","createElement","src","async","onload","head","appendChild","removeExternalScript","querySelector","remove","ajStudent","name","note","genre","photo","dateN","adresse","role","father","profession","nationalid","education","mobile","email","studentData","register","post","url","observe","pipe","handleError","error","status","console","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\my-dashboard\\src\\app\\loading.service.ts"],"sourcesContent":["import { HttpClient,HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport {  catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoadingService {\n  private readonly url=\"http://localhost:9000/api/matiere\";\n  constructor(private http:HttpClient) { }\n\n  loadExternalScript() {\n    const script = document.createElement('script');\n    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.1/flowbite.min.js';\n    script.async = true;\n    script.onload = () => {\n      // Script has loaded, you can now use its functionality\n      // Initialize any required functionality from the script\n    };\n    document.head.appendChild(script);\n  }\n  removeExternalScript() {\n    // If needed, remove the script element from the DOM when the component is destroyed\n    const script = document.querySelector('[src=\"https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.1/flowbite.min.js\"]');\n    if (script) {\n      script.remove();\n    }\n  }\n  ajStudent(\n    name: String,\n    note: String,\n    genre: String,\n    photo: String,\n    dateN: Date,\n    adresse: String,\n    role: String,\n    father: String,\n    profession: String,\n    nationalid: String,\n    education: String,\n    mobile: String,\n    email: String,\n  ): Observable<any> {\n    const studentData = {\n      name,\n      register,\n      genre,\n      photo,\n      dateN,\n      adresse,\n      role,\n      father,\n      profession,\n      nationalid,\n      education,\n      mobile,\n      email\n    };\n\n    // Return the full HTTP response with the created student data\n    return this.http.post(this.url, studentData, { observe: 'response' }).pipe(\n      catchError(this.handleError)\n    );\n  }\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}