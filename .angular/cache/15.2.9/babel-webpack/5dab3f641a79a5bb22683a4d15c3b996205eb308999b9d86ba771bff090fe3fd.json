{"ast":null,"code":"var _class;\nimport { throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserServiceService {\n  constructor(http) {\n    this.http = http;\n    this.url = \"http://localhost:9000/api/users\";\n  }\n  getStudent() {\n    return this.http.get(this.url).pipe(map(data => {\n      return {\n        ...data,\n        activeAwards: data.activeAwards.filter(award => award.status === 'valid')\n      };\n    }));\n    //tap(student=>console.log(\"student\",student)),\n    catchError(this.handleError);\n    ;\n  }\n  getTeacher() {\n    return this.http.get(this.url).pipe(tap(student => console.log(\"student\", student)), catchError(this.handleError));\n  }\n  getonestudent(id) {\n    return this.http.get(\"http://localhost:9000/api/users/\" + id).pipe(tap(student => console.log(\"student\", student)), catchError(this.handleError));\n  }\n  ajStudent(name, register, genre, photo, dateN, adresse, role, father, profession, nationalid, education, mobile, email) {\n    return this.http.post(this.url, {\n      name,\n      register,\n      genre,\n      photo,\n      dateN,\n      adresse,\n      role,\n      father,\n      profession,\n      nationalid,\n      education,\n      mobile,\n      email\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\n_class = UserServiceService;\n_class.ɵfac = function UserServiceService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAGA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,GAAG,EAAEC,UAAU,QAAe,gBAAgB;;;AAKvD,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IADP,QAAG,GAAC,iCAAiC;EACf;EAEhCC,UAAU;IAEf,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,CACjCC,GAAG,CAACC,IAAI,IAAG;MACT,OAAO;QACL,GAAGA,IAAI;QACPC,YAAY,EAAED,IAAI,CAACC,YAAY,CAACC,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,MAAM,KAAK,OAAO;OACzE;IACH,CAAC,CAAC,CACH;IAGC;IACEb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC;IAC/B;EACH;EACOC,UAAU;IAEf,OAAO,IAAI,CAACZ,IAAI,CAACE,GAAG,CAAC,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,CAE/BR,GAAG,CAACiB,OAAO,IAAEC,OAAO,CAACC,GAAG,CAAC,SAAS,EAACF,OAAO,CAAC,CAAC,EAC5ChB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC/B;EACH;EACOK,aAAa,CAACC,EAAM;IAEzB,OAAO,IAAI,CAACjB,IAAI,CAACE,GAAG,CAAC,kCAAkC,GAACe,EAAE,CAAC,CAACb,IAAI,CAC5DR,GAAG,CAACiB,OAAO,IAAEC,OAAO,CAACC,GAAG,CAAC,SAAS,EAACF,OAAO,CAAC,CAAC,EAC5ChB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC/B;EACH;EAEOO,SAAS,CAACC,IAAY,EAAEC,QAAe,EAAEC,KAAY,EAAEC,KAAY,EAACC,KAAU,EAACC,OAAc,EAACC,IAAW,EAACC,MAAa,EAACC,UAAiB,EAACC,UAAiB,EAACC,SAAgB,EAACC,MAAa,EAACC,KAAY;IAC5M,OAAO,IAAI,CAAC/B,IAAI,CAACgC,IAAI,CAAC,IAAI,CAAC7B,GAAG,EAAC;MAC7BgB,IAAI;MAACC,QAAQ;MAACC,KAAK;MAACC,KAAK;MAACC,KAAK;MAACC,OAAO;MAACC,IAAI;MAACC,MAAM;MAACC,UAAU;MAACC,UAAU;MAACC,SAAS;MAACC,MAAM;MAACC;KAC5F,CAAC,CAAC3B,IAAI,CACLP,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEQA,WAAW,CAACsB,KAAwB;IAC1C,IAAIA,KAAK,CAACvB,MAAM,KAAK,CAAC,EAAE;MACtB;MACAI,OAAO,CAACmB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACL;MACA;MACAnB,OAAO,CAACmB,KAAK,CACX,yBAAyBA,KAAK,CAACvB,MAAM,cAAc,EAAEuB,KAAK,CAACA,KAAK,CAAC;;IAErE;IACA,OAAOtC,UAAU,CAAC,MAAM,IAAIuC,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;;SAxDWpC,kBAAkB;;mBAAlBA,MAAkB;AAAA;;SAAlBA,MAAkB;EAAAqC,SAAlBrC,MAAkB;EAAAsC,YAFjB;AAAM","names":["throwError","tap","catchError","UserServiceService","constructor","http","getStudent","get","url","pipe","map","data","activeAwards","filter","award","status","handleError","getTeacher","student","console","log","getonestudent","id","ajStudent","name","register","genre","photo","dateN","adresse","role","father","profession","nationalid","education","mobile","email","post","error","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\my-dashboard\\src\\app\\user-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { tap, catchError,filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserServiceService {\n  private readonly url=\"http://localhost:9000/api/users\";\n  constructor(private http:HttpClient) { }\n\n  public getStudent():Observable<any>\n  {\n    return this.http.get(this.url).pipe(\n      map(data => {\n        return {\n          ...data, \n          activeAwards: data.activeAwards.filter(award => award.status === 'valid')\n        };\n      }),\n    )\n      \n      \n      //tap(student=>console.log(\"student\",student)),\n        catchError(this.handleError)\n    );\n  }\n  public getTeacher():Observable<any>\n  {\n    return this.http.get(this.url).pipe(\n     \n        tap(student=>console.log(\"student\",student)),\n        catchError(this.handleError)\n    );\n  }\n  public getonestudent(id:any):Observable<any>\n  {\n    return this.http.get(\"http://localhost:9000/api/users/\"+id).pipe(\n        tap(student=>console.log(\"student\",student)),\n        catchError(this.handleError)\n    );\n  }\n\n  public ajStudent(name: String, register:String, genre:String, photo:String,dateN:Date,adresse:String,role:String,father:String,profession:String,nationalid:String,education:String,mobile:String,email:String):Observable<any>{\n    return this.http.post(this.url,{\n      name,register,genre,photo,dateN,adresse,role,father,profession,nationalid,education,mobile,email\n    }).pipe(\n      catchError(this.handleError)\n    )\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}