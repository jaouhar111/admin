{"ast":null,"code":"var _class;\nimport { throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserServiceService {\n  constructor(http) {\n    this.http = http;\n    this.url = \"http://localhost:9000/api/users\";\n  }\n  getStudent() {\n    return this.http.get(this.url).pipe(tap(student => console.log(\"student\", student)), catchError(this.handleError));\n  }\n  getTeacher() {\n    return this.http.get(this.url);\n  }\n  getonestudent(id) {\n    return this.http.get(\"http://localhost:9000/api/users/\" + id).pipe(tap(student => console.log(\"student\", student)), catchError(this.handleError));\n  }\n  ajStudent(name, register, genre, photo, dateN, adresse, role, father, profession, nationalid, education, mobile, email) {\n    const studentData = {\n      name,\n      register,\n      genre,\n      photo,\n      dateN,\n      adresse,\n      role,\n      father,\n      profession,\n      nationalid,\n      education,\n      mobile,\n      email\n    };\n    // Return the full HTTP response with the created student data\n    return this.http.post(this.url, studentData, {\n      observe: 'response'\n    }).pipe(catchError(this.handleError));\n  }\n  addUser(user) {\n    return this.http.post(url, user);\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\n_class = UserServiceService;\n_class.ɵfac = function UserServiceService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAGA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,GAAG,EAAEC,UAAU,QAAmB,gBAAgB;;;AAK3D,OAAM,MAAOC,kBAAkB;EAG7BC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IADP,QAAG,GAAC,iCAAiC;EACf;EAEhCC,UAAU;IAGf,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,CACjCR,GAAG,CAACS,OAAO,IAAEC,OAAO,CAACC,GAAG,CAAC,SAAS,EAACF,OAAO,CAAC,CAAC,EAC5CR,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAC7B;EACH;EAGOC,UAAU;IAGf,OAAO,IAAI,CAACT,IAAI,CAACE,GAAG,CAAC,IAAI,CAACC,GAAG,CAAC;EAIhC;EACOO,aAAa,CAACC,EAAM;IAEzB,OAAO,IAAI,CAACX,IAAI,CAACE,GAAG,CAAC,kCAAkC,GAACS,EAAE,CAAC,CAACP,IAAI,CAC5DR,GAAG,CAACS,OAAO,IAAEC,OAAO,CAACC,GAAG,CAAC,SAAS,EAACF,OAAO,CAAC,CAAC,EAC5CR,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAC/B;EACH;EAEAI,SAAS,CACPC,IAAY,EACZC,QAAgB,EAChBC,KAAa,EACbC,KAAa,EACbC,KAAW,EACXC,OAAe,EACfC,IAAY,EACZC,MAAc,EACdC,UAAkB,EAClBC,UAAkB,EAClBC,SAAiB,EACjBC,MAAc,EACdC,KAAa;IAEb,MAAMC,WAAW,GAAG;MAClBb,IAAI;MACJC,QAAQ;MACRC,KAAK;MACLC,KAAK;MACLC,KAAK;MACLC,OAAO;MACPC,IAAI;MACJC,MAAM;MACNC,UAAU;MACVC,UAAU;MACVC,SAAS;MACTC,MAAM;MACNC;KACD;IAED;IACA,OAAO,IAAI,CAACzB,IAAI,CAAC2B,IAAI,CAAC,IAAI,CAACxB,GAAG,EAAEuB,WAAW,EAAE;MAAEE,OAAO,EAAE;IAAU,CAAE,CAAC,CAACxB,IAAI,CACxEP,UAAU,CAAC,IAAI,CAACW,WAAW,CAAC,CAC7B;EACH;EAEAqB,OAAO,CAACC,IAAS;IACf,OAAO,IAAI,CAAC9B,IAAI,CAAC2B,IAAI,CAACxB,GAAG,EAAE2B,IAAI,CAAC;EAClC;EAEQtB,WAAW,CAACuB,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtB;MACA1B,OAAO,CAACyB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACL;MACA;MACAzB,OAAO,CAACyB,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EAAED,KAAK,CAACA,KAAK,CAAC;;IAErE;IACA,OAAOpC,UAAU,CAAC,MAAM,IAAIsC,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;;SApFWnC,kBAAkB;;mBAAlBA,MAAkB;AAAA;;SAAlBA,MAAkB;EAAAoC,SAAlBpC,MAAkB;EAAAqC,YAFjB;AAAM","names":["throwError","tap","catchError","UserServiceService","constructor","http","getStudent","get","url","pipe","student","console","log","handleError","getTeacher","getonestudent","id","ajStudent","name","register","genre","photo","dateN","adresse","role","father","profession","nationalid","education","mobile","email","studentData","post","observe","addUser","user","error","status","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Mehdi\\Desktop\\Angular\\my-dashboard\\src\\app\\user-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { tap, catchError,filter,map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserServiceService {\n  \n  private readonly url=\"http://localhost:9000/api/users\";\n  constructor(private http:HttpClient) { }\n\n  public getStudent():Observable<any>\n  {\n    \n    return this.http.get(this.url).pipe(\n      tap(student=>console.log(\"student\",student)),\n      catchError(this.handleError)\n    )\n  };\n\n  \n  public getTeacher():Observable<any>\n  {\n    \n    return this.http.get(this.url)\n     \n        \n       \n  }\n  public getonestudent(id:any):Observable<any>\n  {\n    return this.http.get(\"http://localhost:9000/api/users/\"+id).pipe(\n        tap(student=>console.log(\"student\",student)),\n        catchError(this.handleError)\n    );\n  }\n\n  ajStudent(\n    name: String,\n    register: String,\n    genre: String,\n    photo: String,\n    dateN: Date,\n    adresse: String,\n    role: String,\n    father: String,\n    profession: String,\n    nationalid: String,\n    education: String,\n    mobile: String,\n    email: String,\n  ): Observable<any> {\n    const studentData = {\n      name,\n      register,\n      genre,\n      photo,\n      dateN,\n      adresse,\n      role,\n      father,\n      profession,\n      nationalid,\n      education,\n      mobile,\n      email\n    };\n\n    // Return the full HTTP response with the created student data\n    return this.http.post(this.url, studentData, { observe: 'response' }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  addUser(user: any): Observable<any> {\n    return this.http.post(url, user);\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, body was: `, error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}